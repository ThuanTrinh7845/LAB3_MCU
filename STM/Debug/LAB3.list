
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e48  08002e48  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  08002e48  08002e48  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e48  08002e48  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e48  08002e48  00012e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e4c  08002e4c  00012e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08002e50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000088  08002ed8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08002ed8  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e1a1  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fb  00000000  00000000  0002e252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a90  00000000  00000000  00030750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000960  00000000  00000000  000311e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181c3  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d793  00000000  00000000  00049d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085bfb  00000000  00000000  00057496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd091  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aec  00000000  00000000  000dd0e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e0c 	.word	0x08002e0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	08002e0c 	.word	0x08002e0c

0800014c <buttonIsPressed>:
int TimerPress[MAX_BUTTON] = {100, 100, 100};

int buttonFlag[MAX_BUTTON] = {0, 0, 0};

int buttonIsPressed(int index)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (buttonFlag[index] == 1)
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <buttonIsPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <buttonIsPressed+0x22>
	{
		buttonFlag[index] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <buttonIsPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <buttonIsPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000d4 	.word	0x200000d4

08000180 <subKeyProcess>:

void subKeyProcess(int index)
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	buttonFlag[index] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000d4 	.word	0x200000d4

080001a0 <getKeyInput>:

void getKeyInput()
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0

	for (int i = 0; i < MAX_BUTTON; i++)
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e076      	b.n	800029a <getKeyInput+0xfa>
	{
		keyReg0[i] = keyReg1[i];
 80001ac:	4a3f      	ldr	r2, [pc, #252]	; (80002ac <getKeyInput+0x10c>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	493e      	ldr	r1, [pc, #248]	; (80002b0 <getKeyInput+0x110>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		keyReg1[i] = keyReg2[i];
 80001bc:	4a3d      	ldr	r2, [pc, #244]	; (80002b4 <getKeyInput+0x114>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4939      	ldr	r1, [pc, #228]	; (80002ac <getKeyInput+0x10c>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		keyReg2[0] = HAL_GPIO_ReadPin(BUTTON0_GPIO_Port, BUTTON0_Pin);
 80001cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001d0:	4839      	ldr	r0, [pc, #228]	; (80002b8 <getKeyInput+0x118>)
 80001d2:	f001 fd15 	bl	8001c00 <HAL_GPIO_ReadPin>
 80001d6:	4603      	mov	r3, r0
 80001d8:	461a      	mov	r2, r3
 80001da:	4b36      	ldr	r3, [pc, #216]	; (80002b4 <getKeyInput+0x114>)
 80001dc:	601a      	str	r2, [r3, #0]
		keyReg2[1] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 80001de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e2:	4835      	ldr	r0, [pc, #212]	; (80002b8 <getKeyInput+0x118>)
 80001e4:	f001 fd0c 	bl	8001c00 <HAL_GPIO_ReadPin>
 80001e8:	4603      	mov	r3, r0
 80001ea:	461a      	mov	r2, r3
 80001ec:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <getKeyInput+0x114>)
 80001ee:	605a      	str	r2, [r3, #4]
		keyReg2[2] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 80001f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001f4:	4830      	ldr	r0, [pc, #192]	; (80002b8 <getKeyInput+0x118>)
 80001f6:	f001 fd03 	bl	8001c00 <HAL_GPIO_ReadPin>
 80001fa:	4603      	mov	r3, r0
 80001fc:	461a      	mov	r2, r3
 80001fe:	4b2d      	ldr	r3, [pc, #180]	; (80002b4 <getKeyInput+0x114>)
 8000200:	609a      	str	r2, [r3, #8]

		if ((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000202:	4a2b      	ldr	r2, [pc, #172]	; (80002b0 <getKeyInput+0x110>)
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020a:	4928      	ldr	r1, [pc, #160]	; (80002ac <getKeyInput+0x10c>)
 800020c:	687b      	ldr	r3, [r7, #4]
 800020e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000212:	429a      	cmp	r2, r3
 8000214:	d13e      	bne.n	8000294 <getKeyInput+0xf4>
 8000216:	4a25      	ldr	r2, [pc, #148]	; (80002ac <getKeyInput+0x10c>)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021e:	4925      	ldr	r1, [pc, #148]	; (80002b4 <getKeyInput+0x114>)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000226:	429a      	cmp	r2, r3
 8000228:	d134      	bne.n	8000294 <getKeyInput+0xf4>
		{
			if (keyReg2[i] != keyReg3[i])
 800022a:	4a22      	ldr	r2, [pc, #136]	; (80002b4 <getKeyInput+0x114>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000232:	4922      	ldr	r1, [pc, #136]	; (80002bc <getKeyInput+0x11c>)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800023a:	429a      	cmp	r2, r3
 800023c:	d016      	beq.n	800026c <getKeyInput+0xcc>
			{
				keyReg3[i] = keyReg2[i];
 800023e:	4a1d      	ldr	r2, [pc, #116]	; (80002b4 <getKeyInput+0x114>)
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000246:	491d      	ldr	r1, [pc, #116]	; (80002bc <getKeyInput+0x11c>)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (keyReg2[i] == PRESSED_STATE)
 800024e:	4a19      	ldr	r2, [pc, #100]	; (80002b4 <getKeyInput+0x114>)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000256:	2b01      	cmp	r3, #1
 8000258:	d11c      	bne.n	8000294 <getKeyInput+0xf4>
				{
					subKeyProcess(i);
 800025a:	6878      	ldr	r0, [r7, #4]
 800025c:	f7ff ff90 	bl	8000180 <subKeyProcess>
					TimerPress[i] = 100;
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <getKeyInput+0x120>)
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2164      	movs	r1, #100	; 0x64
 8000266:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800026a:	e013      	b.n	8000294 <getKeyInput+0xf4>
				}
			}
			else
			{
				TimerPress[i]--;
 800026c:	4a14      	ldr	r2, [pc, #80]	; (80002c0 <getKeyInput+0x120>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000274:	1e5a      	subs	r2, r3, #1
 8000276:	4912      	ldr	r1, [pc, #72]	; (80002c0 <getKeyInput+0x120>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimerPress[i] <= 0)
 800027e:	4a10      	ldr	r2, [pc, #64]	; (80002c0 <getKeyInput+0x120>)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000286:	2b00      	cmp	r3, #0
 8000288:	dc04      	bgt.n	8000294 <getKeyInput+0xf4>
				{
					keyReg3[i] = NORMAL_STATE;
 800028a:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <getKeyInput+0x11c>)
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	2100      	movs	r1, #0
 8000290:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < MAX_BUTTON; i++)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3301      	adds	r3, #1
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	2b02      	cmp	r3, #2
 800029e:	dd85      	ble.n	80001ac <getKeyInput+0xc>
				}
			}
		}
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3708      	adds	r7, #8
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200000b0 	.word	0x200000b0
 80002b0:	200000a4 	.word	0x200000a4
 80002b4:	200000bc 	.word	0x200000bc
 80002b8:	40011000 	.word	0x40011000
 80002bc:	200000c8 	.word	0x200000c8
 80002c0:	20000000 	.word	0x20000000

080002c4 <update_buffer>:
 */

#include "fsm_automatic.h"

void update_buffer()
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
	time_buffer[0]--;
 80002c8:	4b06      	ldr	r3, [pc, #24]	; (80002e4 <update_buffer+0x20>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	4a05      	ldr	r2, [pc, #20]	; (80002e4 <update_buffer+0x20>)
 80002d0:	6013      	str	r3, [r2, #0]
	time_buffer[1]--;
 80002d2:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <update_buffer+0x20>)
 80002d4:	685b      	ldr	r3, [r3, #4]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	4a02      	ldr	r2, [pc, #8]	; (80002e4 <update_buffer+0x20>)
 80002da:	6053      	str	r3, [r2, #4]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	20000104 	.word	0x20000104

080002e8 <fsm_automatic_run>:

void fsm_automatic_run()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	switch(state)
 80002ec:	4b69      	ldr	r3, [pc, #420]	; (8000494 <fsm_automatic_run+0x1ac>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	2b04      	cmp	r3, #4
 80002f2:	f200 80c3 	bhi.w	800047c <fsm_automatic_run+0x194>
 80002f6:	a201      	add	r2, pc, #4	; (adr r2, 80002fc <fsm_automatic_run+0x14>)
 80002f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002fc:	08000311 	.word	0x08000311
 8000300:	080003b5 	.word	0x080003b5
 8000304:	080003e3 	.word	0x080003e3
 8000308:	08000419 	.word	0x08000419
 800030c:	08000447 	.word	0x08000447
	{
		case INIT:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000310:	2201      	movs	r2, #1
 8000312:	2102      	movs	r1, #2
 8000314:	4860      	ldr	r0, [pc, #384]	; (8000498 <fsm_automatic_run+0x1b0>)
 8000316:	f001 fc8a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800031a:	2201      	movs	r2, #1
 800031c:	2108      	movs	r1, #8
 800031e:	485e      	ldr	r0, [pc, #376]	; (8000498 <fsm_automatic_run+0x1b0>)
 8000320:	f001 fc85 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2104      	movs	r1, #4
 8000328:	485b      	ldr	r0, [pc, #364]	; (8000498 <fsm_automatic_run+0x1b0>)
 800032a:	f001 fc80 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800032e:	2201      	movs	r2, #1
 8000330:	2110      	movs	r1, #16
 8000332:	4859      	ldr	r0, [pc, #356]	; (8000498 <fsm_automatic_run+0x1b0>)
 8000334:	f001 fc7b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2140      	movs	r1, #64	; 0x40
 800033c:	4856      	ldr	r0, [pc, #344]	; (8000498 <fsm_automatic_run+0x1b0>)
 800033e:	f001 fc76 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000342:	2201      	movs	r2, #1
 8000344:	2120      	movs	r1, #32
 8000346:	4854      	ldr	r0, [pc, #336]	; (8000498 <fsm_automatic_run+0x1b0>)
 8000348:	f001 fc71 	bl	8001c2e <HAL_GPIO_WritePin>


			if (red - (yellow + green) > 0)
 800034c:	4b53      	ldr	r3, [pc, #332]	; (800049c <fsm_automatic_run+0x1b4>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b53      	ldr	r3, [pc, #332]	; (80004a0 <fsm_automatic_run+0x1b8>)
 8000352:	6819      	ldr	r1, [r3, #0]
 8000354:	4b53      	ldr	r3, [pc, #332]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	440b      	add	r3, r1
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	2b00      	cmp	r3, #0
 800035e:	dd0c      	ble.n	800037a <fsm_automatic_run+0x92>
			{
				green += red - (yellow + green);
 8000360:	4b4e      	ldr	r3, [pc, #312]	; (800049c <fsm_automatic_run+0x1b4>)
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	4b4e      	ldr	r3, [pc, #312]	; (80004a0 <fsm_automatic_run+0x1b8>)
 8000366:	6819      	ldr	r1, [r3, #0]
 8000368:	4b4e      	ldr	r3, [pc, #312]	; (80004a4 <fsm_automatic_run+0x1bc>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	440b      	add	r3, r1
 800036e:	1ad2      	subs	r2, r2, r3
 8000370:	4b4c      	ldr	r3, [pc, #304]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4413      	add	r3, r2
 8000376:	4a4b      	ldr	r2, [pc, #300]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000378:	6013      	str	r3, [r2, #0]
			}
			if (red - (yellow + green) < 0)
 800037a:	4b48      	ldr	r3, [pc, #288]	; (800049c <fsm_automatic_run+0x1b4>)
 800037c:	681a      	ldr	r2, [r3, #0]
 800037e:	4b48      	ldr	r3, [pc, #288]	; (80004a0 <fsm_automatic_run+0x1b8>)
 8000380:	6819      	ldr	r1, [r3, #0]
 8000382:	4b48      	ldr	r3, [pc, #288]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	440b      	add	r3, r1
 8000388:	1ad3      	subs	r3, r2, r3
 800038a:	2b00      	cmp	r3, #0
 800038c:	da06      	bge.n	800039c <fsm_automatic_run+0xb4>
			{
				red += (yellow + green) - red;
 800038e:	4b44      	ldr	r3, [pc, #272]	; (80004a0 <fsm_automatic_run+0x1b8>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b44      	ldr	r3, [pc, #272]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	4413      	add	r3, r2
 8000398:	4a40      	ldr	r2, [pc, #256]	; (800049c <fsm_automatic_run+0x1b4>)
 800039a:	6013      	str	r3, [r2, #0]
			}

			if (1)
			{
				state = AUTO_RED_GREEN;
 800039c:	4b3d      	ldr	r3, [pc, #244]	; (8000494 <fsm_automatic_run+0x1ac>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]

				time_buffer[0] = red;
 80003a2:	4b3e      	ldr	r3, [pc, #248]	; (800049c <fsm_automatic_run+0x1b4>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a40      	ldr	r2, [pc, #256]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003a8:	6013      	str	r3, [r2, #0]
				time_buffer[1] = green;
 80003aa:	4b3e      	ldr	r3, [pc, #248]	; (80004a4 <fsm_automatic_run+0x1bc>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a3e      	ldr	r2, [pc, #248]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003b0:	6053      	str	r3, [r2, #4]
			}
			break;
 80003b2:	e06c      	b.n	800048e <fsm_automatic_run+0x1a6>
		case AUTO_RED_GREEN:
			red_green();
 80003b4:	f001 f884 	bl	80014c0 <red_green>
////				setTimer(100, 1);
//				time_buffer[0]--;
//				time_buffer[1]--;
////			}

			if (time_buffer[1] <= 0)
 80003b8:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	dc06      	bgt.n	80003ce <fsm_automatic_run+0xe6>
			{
				state = AUTO_RED_YELLOW;
 80003c0:	4b34      	ldr	r3, [pc, #208]	; (8000494 <fsm_automatic_run+0x1ac>)
 80003c2:	2202      	movs	r2, #2
 80003c4:	601a      	str	r2, [r3, #0]
				//setTimer(100, 1);

				time_buffer[1] = yellow;
 80003c6:	4b36      	ldr	r3, [pc, #216]	; (80004a0 <fsm_automatic_run+0x1b8>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	4a37      	ldr	r2, [pc, #220]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003cc:	6053      	str	r3, [r2, #4]
			}
			if (buttonIsPressed(0))
 80003ce:	2000      	movs	r0, #0
 80003d0:	f7ff febc 	bl	800014c <buttonIsPressed>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d052      	beq.n	8000480 <fsm_automatic_run+0x198>
			{
				state = MAN_INIT;
 80003da:	4b2e      	ldr	r3, [pc, #184]	; (8000494 <fsm_automatic_run+0x1ac>)
 80003dc:	220a      	movs	r2, #10
 80003de:	601a      	str	r2, [r3, #0]
			}
			break;
 80003e0:	e04e      	b.n	8000480 <fsm_automatic_run+0x198>
		case AUTO_RED_YELLOW:
			red_yellow();
 80003e2:	f001 f891 	bl	8001508 <red_yellow>
////			{
////				setTimer(100, 1);
//				time_buffer[0]--;
//				time_buffer[1]--;
////			}
			if (time_buffer[0] <= 0)
 80003e6:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	dc0a      	bgt.n	8000404 <fsm_automatic_run+0x11c>
			{
				state = AUTO_GREEN_RED;
 80003ee:	4b29      	ldr	r3, [pc, #164]	; (8000494 <fsm_automatic_run+0x1ac>)
 80003f0:	2203      	movs	r2, #3
 80003f2:	601a      	str	r2, [r3, #0]
				//setTimer(100, 1);

				time_buffer[0] = green;
 80003f4:	4b2b      	ldr	r3, [pc, #172]	; (80004a4 <fsm_automatic_run+0x1bc>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a2b      	ldr	r2, [pc, #172]	; (80004a8 <fsm_automatic_run+0x1c0>)
 80003fa:	6013      	str	r3, [r2, #0]
				time_buffer[1] = red;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <fsm_automatic_run+0x1b4>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a29      	ldr	r2, [pc, #164]	; (80004a8 <fsm_automatic_run+0x1c0>)
 8000402:	6053      	str	r3, [r2, #4]
			}
			if (buttonIsPressed(0))
 8000404:	2000      	movs	r0, #0
 8000406:	f7ff fea1 	bl	800014c <buttonIsPressed>
 800040a:	4603      	mov	r3, r0
 800040c:	2b00      	cmp	r3, #0
 800040e:	d039      	beq.n	8000484 <fsm_automatic_run+0x19c>
			{
				state = MAN_INIT;
 8000410:	4b20      	ldr	r3, [pc, #128]	; (8000494 <fsm_automatic_run+0x1ac>)
 8000412:	220a      	movs	r2, #10
 8000414:	601a      	str	r2, [r3, #0]
			}
			break;
 8000416:	e035      	b.n	8000484 <fsm_automatic_run+0x19c>
		case AUTO_GREEN_RED:
			green_red();
 8000418:	f001 f89a 	bl	8001550 <green_red>
//				time_buffer[0]--;
//				time_buffer[1]--;
////			}


			if (time_buffer[0] <= 0)
 800041c:	4b22      	ldr	r3, [pc, #136]	; (80004a8 <fsm_automatic_run+0x1c0>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	dc06      	bgt.n	8000432 <fsm_automatic_run+0x14a>
			{
				state = AUTO_YELLOW_RED;
 8000424:	4b1b      	ldr	r3, [pc, #108]	; (8000494 <fsm_automatic_run+0x1ac>)
 8000426:	2204      	movs	r2, #4
 8000428:	601a      	str	r2, [r3, #0]
				//setTimer(100, 1);

				time_buffer[0] = yellow;
 800042a:	4b1d      	ldr	r3, [pc, #116]	; (80004a0 <fsm_automatic_run+0x1b8>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	4a1e      	ldr	r2, [pc, #120]	; (80004a8 <fsm_automatic_run+0x1c0>)
 8000430:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsPressed(0))
 8000432:	2000      	movs	r0, #0
 8000434:	f7ff fe8a 	bl	800014c <buttonIsPressed>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d024      	beq.n	8000488 <fsm_automatic_run+0x1a0>
			{
				state = MAN_INIT;
 800043e:	4b15      	ldr	r3, [pc, #84]	; (8000494 <fsm_automatic_run+0x1ac>)
 8000440:	220a      	movs	r2, #10
 8000442:	601a      	str	r2, [r3, #0]
			}
			break;
 8000444:	e020      	b.n	8000488 <fsm_automatic_run+0x1a0>
		case AUTO_YELLOW_RED:
			yellow_red();
 8000446:	f001 f8a7 	bl	8001598 <yellow_red>
//				time_buffer[0]--;
//				time_buffer[1]--;
////			}


			if (time_buffer[0] <= 0)
 800044a:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <fsm_automatic_run+0x1c0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2b00      	cmp	r3, #0
 8000450:	dc0a      	bgt.n	8000468 <fsm_automatic_run+0x180>
			{
				state = AUTO_RED_GREEN;
 8000452:	4b10      	ldr	r3, [pc, #64]	; (8000494 <fsm_automatic_run+0x1ac>)
 8000454:	2201      	movs	r2, #1
 8000456:	601a      	str	r2, [r3, #0]
				//setTimer(100, 1);

				time_buffer[0] = red;
 8000458:	4b10      	ldr	r3, [pc, #64]	; (800049c <fsm_automatic_run+0x1b4>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a12      	ldr	r2, [pc, #72]	; (80004a8 <fsm_automatic_run+0x1c0>)
 800045e:	6013      	str	r3, [r2, #0]
				time_buffer[1] = green;
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <fsm_automatic_run+0x1bc>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a10      	ldr	r2, [pc, #64]	; (80004a8 <fsm_automatic_run+0x1c0>)
 8000466:	6053      	str	r3, [r2, #4]

			}
			if (buttonIsPressed(0))
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff fe6f 	bl	800014c <buttonIsPressed>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d00b      	beq.n	800048c <fsm_automatic_run+0x1a4>
			{
				state = MAN_INIT;
 8000474:	4b07      	ldr	r3, [pc, #28]	; (8000494 <fsm_automatic_run+0x1ac>)
 8000476:	220a      	movs	r2, #10
 8000478:	601a      	str	r2, [r3, #0]
			}
			break;
 800047a:	e007      	b.n	800048c <fsm_automatic_run+0x1a4>
		default:
			break;
 800047c:	bf00      	nop
 800047e:	e006      	b.n	800048e <fsm_automatic_run+0x1a6>
			break;
 8000480:	bf00      	nop
 8000482:	e004      	b.n	800048e <fsm_automatic_run+0x1a6>
			break;
 8000484:	bf00      	nop
 8000486:	e002      	b.n	800048e <fsm_automatic_run+0x1a6>
			break;
 8000488:	bf00      	nop
 800048a:	e000      	b.n	800048e <fsm_automatic_run+0x1a6>
			break;
 800048c:	bf00      	nop
	}

}
 800048e:	bf00      	nop
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	200000f0 	.word	0x200000f0
 8000498:	40010800 	.word	0x40010800
 800049c:	2000000c 	.word	0x2000000c
 80004a0:	20000014 	.word	0x20000014
 80004a4:	20000010 	.word	0x20000010
 80004a8:	20000104 	.word	0x20000104

080004ac <fsm_manual_run>:
 */

#include "fsm_manual.h"

void fsm_manual_run()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	switch(state)
 80004b0:	4b90      	ldr	r3, [pc, #576]	; (80006f4 <fsm_manual_run+0x248>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	3b0a      	subs	r3, #10
 80004b6:	2b03      	cmp	r3, #3
 80004b8:	f200 8113 	bhi.w	80006e2 <fsm_manual_run+0x236>
 80004bc:	a201      	add	r2, pc, #4	; (adr r2, 80004c4 <fsm_manual_run+0x18>)
 80004be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c2:	bf00      	nop
 80004c4:	080004d5 	.word	0x080004d5
 80004c8:	08000519 	.word	0x08000519
 80004cc:	080005b3 	.word	0x080005b3
 80004d0:	0800064b 	.word	0x0800064b
	{
		case MAN_INIT:
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	4887      	ldr	r0, [pc, #540]	; (80006f8 <fsm_manual_run+0x24c>)
 80004da:	f001 fba8 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	2108      	movs	r1, #8
 80004e2:	4885      	ldr	r0, [pc, #532]	; (80006f8 <fsm_manual_run+0x24c>)
 80004e4:	f001 fba3 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80004e8:	2201      	movs	r2, #1
 80004ea:	2104      	movs	r1, #4
 80004ec:	4882      	ldr	r0, [pc, #520]	; (80006f8 <fsm_manual_run+0x24c>)
 80004ee:	f001 fb9e 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80004f2:	2201      	movs	r2, #1
 80004f4:	2110      	movs	r1, #16
 80004f6:	4880      	ldr	r0, [pc, #512]	; (80006f8 <fsm_manual_run+0x24c>)
 80004f8:	f001 fb99 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2140      	movs	r1, #64	; 0x40
 8000500:	487d      	ldr	r0, [pc, #500]	; (80006f8 <fsm_manual_run+0x24c>)
 8000502:	f001 fb94 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000506:	2201      	movs	r2, #1
 8000508:	2120      	movs	r1, #32
 800050a:	487b      	ldr	r0, [pc, #492]	; (80006f8 <fsm_manual_run+0x24c>)
 800050c:	f001 fb8f 	bl	8001c2e <HAL_GPIO_WritePin>

			if (1)
			{
				state = MAN_RED;
 8000510:	4b78      	ldr	r3, [pc, #480]	; (80006f4 <fsm_manual_run+0x248>)
 8000512:	220b      	movs	r2, #11
 8000514:	601a      	str	r2, [r3, #0]
			}
			break;
 8000516:	e0eb      	b.n	80006f0 <fsm_manual_run+0x244>
		case MAN_RED:
			time_buffer[0] = man_red;
 8000518:	4b78      	ldr	r3, [pc, #480]	; (80006fc <fsm_manual_run+0x250>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a78      	ldr	r2, [pc, #480]	; (8000700 <fsm_manual_run+0x254>)
 800051e:	6013      	str	r3, [r2, #0]
			time_buffer[1] = MAN_RED - 10;
 8000520:	4b77      	ldr	r3, [pc, #476]	; (8000700 <fsm_manual_run+0x254>)
 8000522:	2201      	movs	r2, #1
 8000524:	605a      	str	r2, [r3, #4]


			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000526:	2102      	movs	r1, #2
 8000528:	4873      	ldr	r0, [pc, #460]	; (80006f8 <fsm_manual_run+0x24c>)
 800052a:	f001 fb98 	bl	8001c5e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2108      	movs	r1, #8
 8000532:	4871      	ldr	r0, [pc, #452]	; (80006f8 <fsm_manual_run+0x24c>)
 8000534:	f001 fb7b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000538:	2201      	movs	r2, #1
 800053a:	2104      	movs	r1, #4
 800053c:	486e      	ldr	r0, [pc, #440]	; (80006f8 <fsm_manual_run+0x24c>)
 800053e:	f001 fb76 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_TogglePin(LED_RED1_GPIO_Port, LED_RED1_Pin);
 8000542:	2110      	movs	r1, #16
 8000544:	486c      	ldr	r0, [pc, #432]	; (80006f8 <fsm_manual_run+0x24c>)
 8000546:	f001 fb8a 	bl	8001c5e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	486a      	ldr	r0, [pc, #424]	; (80006f8 <fsm_manual_run+0x24c>)
 8000550:	f001 fb6d 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2120      	movs	r1, #32
 8000558:	4867      	ldr	r0, [pc, #412]	; (80006f8 <fsm_manual_run+0x24c>)
 800055a:	f001 fb68 	bl	8001c2e <HAL_GPIO_WritePin>

			if (man_red > 99)
 800055e:	4b67      	ldr	r3, [pc, #412]	; (80006fc <fsm_manual_run+0x250>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2b63      	cmp	r3, #99	; 0x63
 8000564:	dd02      	ble.n	800056c <fsm_manual_run+0xc0>
			{
				man_red = 0;
 8000566:	4b65      	ldr	r3, [pc, #404]	; (80006fc <fsm_manual_run+0x250>)
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
			}
			if (buttonIsPressed(0))
 800056c:	2000      	movs	r0, #0
 800056e:	f7ff fded 	bl	800014c <buttonIsPressed>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <fsm_manual_run+0xd2>
			{
				state = MAN_GREEN;
 8000578:	4b5e      	ldr	r3, [pc, #376]	; (80006f4 <fsm_manual_run+0x248>)
 800057a:	220c      	movs	r2, #12
 800057c:	601a      	str	r2, [r3, #0]
			}

			if (buttonIsPressed(1))
 800057e:	2001      	movs	r0, #1
 8000580:	f7ff fde4 	bl	800014c <buttonIsPressed>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d004      	beq.n	8000594 <fsm_manual_run+0xe8>
			{
				man_red++;
 800058a:	4b5c      	ldr	r3, [pc, #368]	; (80006fc <fsm_manual_run+0x250>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	3301      	adds	r3, #1
 8000590:	4a5a      	ldr	r2, [pc, #360]	; (80006fc <fsm_manual_run+0x250>)
 8000592:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsPressed(2))
 8000594:	2002      	movs	r0, #2
 8000596:	f7ff fdd9 	bl	800014c <buttonIsPressed>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	f000 80a2 	beq.w	80006e6 <fsm_manual_run+0x23a>
			{
				red = man_red;
 80005a2:	4b56      	ldr	r3, [pc, #344]	; (80006fc <fsm_manual_run+0x250>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a57      	ldr	r2, [pc, #348]	; (8000704 <fsm_manual_run+0x258>)
 80005a8:	6013      	str	r3, [r2, #0]
				man_red = 0;
 80005aa:	4b54      	ldr	r3, [pc, #336]	; (80006fc <fsm_manual_run+0x250>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
			}

			break;
 80005b0:	e099      	b.n	80006e6 <fsm_manual_run+0x23a>
		case MAN_GREEN:
			time_buffer[0] = man_green;
 80005b2:	4b55      	ldr	r3, [pc, #340]	; (8000708 <fsm_manual_run+0x25c>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a52      	ldr	r2, [pc, #328]	; (8000700 <fsm_manual_run+0x254>)
 80005b8:	6013      	str	r3, [r2, #0]
			time_buffer[1] = MAN_GREEN - 10;
 80005ba:	4b51      	ldr	r3, [pc, #324]	; (8000700 <fsm_manual_run+0x254>)
 80005bc:	2202      	movs	r2, #2
 80005be:	605a      	str	r2, [r3, #4]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	2102      	movs	r1, #2
 80005c4:	484c      	ldr	r0, [pc, #304]	; (80006f8 <fsm_manual_run+0x24c>)
 80005c6:	f001 fb32 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80005ca:	2108      	movs	r1, #8
 80005cc:	484a      	ldr	r0, [pc, #296]	; (80006f8 <fsm_manual_run+0x24c>)
 80005ce:	f001 fb46 	bl	8001c5e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2104      	movs	r1, #4
 80005d6:	4848      	ldr	r0, [pc, #288]	; (80006f8 <fsm_manual_run+0x24c>)
 80005d8:	f001 fb29 	bl	8001c2e <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4845      	ldr	r0, [pc, #276]	; (80006f8 <fsm_manual_run+0x24c>)
 80005e2:	f001 fb24 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin);
 80005e6:	2140      	movs	r1, #64	; 0x40
 80005e8:	4843      	ldr	r0, [pc, #268]	; (80006f8 <fsm_manual_run+0x24c>)
 80005ea:	f001 fb38 	bl	8001c5e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2120      	movs	r1, #32
 80005f2:	4841      	ldr	r0, [pc, #260]	; (80006f8 <fsm_manual_run+0x24c>)
 80005f4:	f001 fb1b 	bl	8001c2e <HAL_GPIO_WritePin>

			if (man_green > 99)
 80005f8:	4b43      	ldr	r3, [pc, #268]	; (8000708 <fsm_manual_run+0x25c>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	2b63      	cmp	r3, #99	; 0x63
 80005fe:	dd02      	ble.n	8000606 <fsm_manual_run+0x15a>
			{
				man_green = 0;
 8000600:	4b41      	ldr	r3, [pc, #260]	; (8000708 <fsm_manual_run+0x25c>)
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
			}

			if (buttonIsPressed(0))
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff fda0 	bl	800014c <buttonIsPressed>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d002      	beq.n	8000618 <fsm_manual_run+0x16c>
			{
				state = MAN_YELLOW;
 8000612:	4b38      	ldr	r3, [pc, #224]	; (80006f4 <fsm_manual_run+0x248>)
 8000614:	220d      	movs	r2, #13
 8000616:	601a      	str	r2, [r3, #0]
			}

			if (buttonIsPressed(1))
 8000618:	2001      	movs	r0, #1
 800061a:	f7ff fd97 	bl	800014c <buttonIsPressed>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d004      	beq.n	800062e <fsm_manual_run+0x182>
			{
				man_green++;
 8000624:	4b38      	ldr	r3, [pc, #224]	; (8000708 <fsm_manual_run+0x25c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3301      	adds	r3, #1
 800062a:	4a37      	ldr	r2, [pc, #220]	; (8000708 <fsm_manual_run+0x25c>)
 800062c:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsPressed(2))
 800062e:	2002      	movs	r0, #2
 8000630:	f7ff fd8c 	bl	800014c <buttonIsPressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d057      	beq.n	80006ea <fsm_manual_run+0x23e>
			{
				green = man_green;
 800063a:	4b33      	ldr	r3, [pc, #204]	; (8000708 <fsm_manual_run+0x25c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a33      	ldr	r2, [pc, #204]	; (800070c <fsm_manual_run+0x260>)
 8000640:	6013      	str	r3, [r2, #0]
				man_green = 0;
 8000642:	4b31      	ldr	r3, [pc, #196]	; (8000708 <fsm_manual_run+0x25c>)
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
			}

			break;
 8000648:	e04f      	b.n	80006ea <fsm_manual_run+0x23e>
		case MAN_YELLOW:
			time_buffer[0] = man_yellow;
 800064a:	4b31      	ldr	r3, [pc, #196]	; (8000710 <fsm_manual_run+0x264>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a2c      	ldr	r2, [pc, #176]	; (8000700 <fsm_manual_run+0x254>)
 8000650:	6013      	str	r3, [r2, #0]
			time_buffer[1] = MAN_YELLOW - 10;
 8000652:	4b2b      	ldr	r3, [pc, #172]	; (8000700 <fsm_manual_run+0x254>)
 8000654:	2203      	movs	r2, #3
 8000656:	605a      	str	r2, [r3, #4]

			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2102      	movs	r1, #2
 800065c:	4826      	ldr	r0, [pc, #152]	; (80006f8 <fsm_manual_run+0x24c>)
 800065e:	f001 fae6 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2108      	movs	r1, #8
 8000666:	4824      	ldr	r0, [pc, #144]	; (80006f8 <fsm_manual_run+0x24c>)
 8000668:	f001 fae1 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800066c:	2104      	movs	r1, #4
 800066e:	4822      	ldr	r0, [pc, #136]	; (80006f8 <fsm_manual_run+0x24c>)
 8000670:	f001 faf5 	bl	8001c5e <HAL_GPIO_TogglePin>

			HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2110      	movs	r1, #16
 8000678:	481f      	ldr	r0, [pc, #124]	; (80006f8 <fsm_manual_run+0x24c>)
 800067a:	f001 fad8 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2140      	movs	r1, #64	; 0x40
 8000682:	481d      	ldr	r0, [pc, #116]	; (80006f8 <fsm_manual_run+0x24c>)
 8000684:	f001 fad3 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin);
 8000688:	2120      	movs	r1, #32
 800068a:	481b      	ldr	r0, [pc, #108]	; (80006f8 <fsm_manual_run+0x24c>)
 800068c:	f001 fae7 	bl	8001c5e <HAL_GPIO_TogglePin>

			if (man_yellow > 99)
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <fsm_manual_run+0x264>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b63      	cmp	r3, #99	; 0x63
 8000696:	dd02      	ble.n	800069e <fsm_manual_run+0x1f2>
			{
				man_yellow = 0;
 8000698:	4b1d      	ldr	r3, [pc, #116]	; (8000710 <fsm_manual_run+0x264>)
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
			}
			if (buttonIsPressed(0))
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fd54 	bl	800014c <buttonIsPressed>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <fsm_manual_run+0x204>
			{
				state = INIT;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <fsm_manual_run+0x248>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
			}

			if (buttonIsPressed(1))
 80006b0:	2001      	movs	r0, #1
 80006b2:	f7ff fd4b 	bl	800014c <buttonIsPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d004      	beq.n	80006c6 <fsm_manual_run+0x21a>
			{
				man_yellow++;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <fsm_manual_run+0x264>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	3301      	adds	r3, #1
 80006c2:	4a13      	ldr	r2, [pc, #76]	; (8000710 <fsm_manual_run+0x264>)
 80006c4:	6013      	str	r3, [r2, #0]
			}
			if (buttonIsPressed(2))
 80006c6:	2002      	movs	r0, #2
 80006c8:	f7ff fd40 	bl	800014c <buttonIsPressed>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00d      	beq.n	80006ee <fsm_manual_run+0x242>
			{
				yellow = man_yellow;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <fsm_manual_run+0x264>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	4a0f      	ldr	r2, [pc, #60]	; (8000714 <fsm_manual_run+0x268>)
 80006d8:	6013      	str	r3, [r2, #0]
				man_yellow = 0;
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <fsm_manual_run+0x264>)
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
			}

			break;
 80006e0:	e005      	b.n	80006ee <fsm_manual_run+0x242>
		default:
			break;
 80006e2:	bf00      	nop
 80006e4:	e004      	b.n	80006f0 <fsm_manual_run+0x244>
			break;
 80006e6:	bf00      	nop
 80006e8:	e002      	b.n	80006f0 <fsm_manual_run+0x244>
			break;
 80006ea:	bf00      	nop
 80006ec:	e000      	b.n	80006f0 <fsm_manual_run+0x244>
			break;
 80006ee:	bf00      	nop
	}
}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200000f0 	.word	0x200000f0
 80006f8:	40010800 	.word	0x40010800
 80006fc:	200000e0 	.word	0x200000e0
 8000700:	20000104 	.word	0x20000104
 8000704:	2000000c 	.word	0x2000000c
 8000708:	200000e4 	.word	0x200000e4
 800070c:	20000010 	.word	0x20000010
 8000710:	200000e8 	.word	0x200000e8
 8000714:	20000014 	.word	0x20000014

08000718 <display7SEG>:
 *      Author: THUAN
 */
#include "led7_segment.h"

void display7SEG(int num)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2180      	movs	r1, #128	; 0x80
 8000724:	48c0      	ldr	r0, [pc, #768]	; (8000a28 <display7SEG+0x310>)
 8000726:	f001 fa82 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000730:	48bd      	ldr	r0, [pc, #756]	; (8000a28 <display7SEG+0x310>)
 8000732:	f001 fa7c 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_SET);
 8000736:	2201      	movs	r2, #1
 8000738:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073c:	48ba      	ldr	r0, [pc, #744]	; (8000a28 <display7SEG+0x310>)
 800073e:	f001 fa76 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000748:	48b7      	ldr	r0, [pc, #732]	; (8000a28 <display7SEG+0x310>)
 800074a:	f001 fa70 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 800074e:	2201      	movs	r2, #1
 8000750:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000754:	48b4      	ldr	r0, [pc, #720]	; (8000a28 <display7SEG+0x310>)
 8000756:	f001 fa6a 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000760:	48b1      	ldr	r0, [pc, #708]	; (8000a28 <display7SEG+0x310>)
 8000762:	f001 fa64 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	48ae      	ldr	r0, [pc, #696]	; (8000a28 <display7SEG+0x310>)
 800076e:	f001 fa5e 	bl	8001c2e <HAL_GPIO_WritePin>
		if (num == 0)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d122      	bne.n	80007be <display7SEG+0xa6>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	48aa      	ldr	r0, [pc, #680]	; (8000a28 <display7SEG+0x310>)
 800077e:	f001 fa56 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000788:	48a7      	ldr	r0, [pc, #668]	; (8000a28 <display7SEG+0x310>)
 800078a:	f001 fa50 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000794:	48a4      	ldr	r0, [pc, #656]	; (8000a28 <display7SEG+0x310>)
 8000796:	f001 fa4a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007a0:	48a1      	ldr	r0, [pc, #644]	; (8000a28 <display7SEG+0x310>)
 80007a2:	f001 fa44 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ac:	489e      	ldr	r0, [pc, #632]	; (8000a28 <display7SEG+0x310>)
 80007ae:	f001 fa3e 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007b8:	489b      	ldr	r0, [pc, #620]	; (8000a28 <display7SEG+0x310>)
 80007ba:	f001 fa38 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b01      	cmp	r3, #1
 80007c2:	d10b      	bne.n	80007dc <display7SEG+0xc4>
		{
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	4897      	ldr	r0, [pc, #604]	; (8000a28 <display7SEG+0x310>)
 80007cc:	f001 fa2f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4894      	ldr	r0, [pc, #592]	; (8000a28 <display7SEG+0x310>)
 80007d8:	f001 fa29 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 2)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b02      	cmp	r3, #2
 80007e0:	d11c      	bne.n	800081c <display7SEG+0x104>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2180      	movs	r1, #128	; 0x80
 80007e6:	4890      	ldr	r0, [pc, #576]	; (8000a28 <display7SEG+0x310>)
 80007e8:	f001 fa21 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007f2:	488d      	ldr	r0, [pc, #564]	; (8000a28 <display7SEG+0x310>)
 80007f4:	f001 fa1b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80007f8:	2200      	movs	r2, #0
 80007fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007fe:	488a      	ldr	r0, [pc, #552]	; (8000a28 <display7SEG+0x310>)
 8000800:	f001 fa15 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800080a:	4887      	ldr	r0, [pc, #540]	; (8000a28 <display7SEG+0x310>)
 800080c:	f001 fa0f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000810:	2200      	movs	r2, #0
 8000812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000816:	4884      	ldr	r0, [pc, #528]	; (8000a28 <display7SEG+0x310>)
 8000818:	f001 fa09 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 3)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b03      	cmp	r3, #3
 8000820:	d11c      	bne.n	800085c <display7SEG+0x144>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000822:	2200      	movs	r2, #0
 8000824:	2180      	movs	r1, #128	; 0x80
 8000826:	4880      	ldr	r0, [pc, #512]	; (8000a28 <display7SEG+0x310>)
 8000828:	f001 fa01 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	487d      	ldr	r0, [pc, #500]	; (8000a28 <display7SEG+0x310>)
 8000834:	f001 f9fb 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000838:	2200      	movs	r2, #0
 800083a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800083e:	487a      	ldr	r0, [pc, #488]	; (8000a28 <display7SEG+0x310>)
 8000840:	f001 f9f5 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 8000844:	2200      	movs	r2, #0
 8000846:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084a:	4877      	ldr	r0, [pc, #476]	; (8000a28 <display7SEG+0x310>)
 800084c:	f001 f9ef 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000856:	4874      	ldr	r0, [pc, #464]	; (8000a28 <display7SEG+0x310>)
 8000858:	f001 f9e9 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 4)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b04      	cmp	r3, #4
 8000860:	d117      	bne.n	8000892 <display7SEG+0x17a>
		{
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000868:	486f      	ldr	r0, [pc, #444]	; (8000a28 <display7SEG+0x310>)
 800086a:	f001 f9e0 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000874:	486c      	ldr	r0, [pc, #432]	; (8000a28 <display7SEG+0x310>)
 8000876:	f001 f9da 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000880:	4869      	ldr	r0, [pc, #420]	; (8000a28 <display7SEG+0x310>)
 8000882:	f001 f9d4 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088c:	4866      	ldr	r0, [pc, #408]	; (8000a28 <display7SEG+0x310>)
 800088e:	f001 f9ce 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 5)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b05      	cmp	r3, #5
 8000896:	d11c      	bne.n	80008d2 <display7SEG+0x1ba>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000898:	2200      	movs	r2, #0
 800089a:	2180      	movs	r1, #128	; 0x80
 800089c:	4862      	ldr	r0, [pc, #392]	; (8000a28 <display7SEG+0x310>)
 800089e:	f001 f9c6 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008a8:	485f      	ldr	r0, [pc, #380]	; (8000a28 <display7SEG+0x310>)
 80008aa:	f001 f9c0 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b4:	485c      	ldr	r0, [pc, #368]	; (8000a28 <display7SEG+0x310>)
 80008b6:	f001 f9ba 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c0:	4859      	ldr	r0, [pc, #356]	; (8000a28 <display7SEG+0x310>)
 80008c2:	f001 f9b4 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008cc:	4856      	ldr	r0, [pc, #344]	; (8000a28 <display7SEG+0x310>)
 80008ce:	f001 f9ae 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 6)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b06      	cmp	r3, #6
 80008d6:	d122      	bne.n	800091e <display7SEG+0x206>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	4852      	ldr	r0, [pc, #328]	; (8000a28 <display7SEG+0x310>)
 80008de:	f001 f9a6 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	484f      	ldr	r0, [pc, #316]	; (8000a28 <display7SEG+0x310>)
 80008ea:	f001 f9a0 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	484c      	ldr	r0, [pc, #304]	; (8000a28 <display7SEG+0x310>)
 80008f6:	f001 f99a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000900:	4849      	ldr	r0, [pc, #292]	; (8000a28 <display7SEG+0x310>)
 8000902:	f001 f994 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	4846      	ldr	r0, [pc, #280]	; (8000a28 <display7SEG+0x310>)
 800090e:	f001 f98e 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000918:	4843      	ldr	r0, [pc, #268]	; (8000a28 <display7SEG+0x310>)
 800091a:	f001 f988 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 7)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2b07      	cmp	r3, #7
 8000922:	d117      	bne.n	8000954 <display7SEG+0x23c>
		{
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092a:	483f      	ldr	r0, [pc, #252]	; (8000a28 <display7SEG+0x310>)
 800092c:	f001 f97f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_SET);
 8000930:	2201      	movs	r2, #1
 8000932:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000936:	483c      	ldr	r0, [pc, #240]	; (8000a28 <display7SEG+0x310>)
 8000938:	f001 f979 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000942:	4839      	ldr	r0, [pc, #228]	; (8000a28 <display7SEG+0x310>)
 8000944:	f001 f973 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4836      	ldr	r0, [pc, #216]	; (8000a28 <display7SEG+0x310>)
 8000950:	f001 f96d 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 7)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b07      	cmp	r3, #7
 8000958:	d110      	bne.n	800097c <display7SEG+0x264>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	4832      	ldr	r0, [pc, #200]	; (8000a28 <display7SEG+0x310>)
 8000960:	f001 f965 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096a:	482f      	ldr	r0, [pc, #188]	; (8000a28 <display7SEG+0x310>)
 800096c:	f001 f95f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000976:	482c      	ldr	r0, [pc, #176]	; (8000a28 <display7SEG+0x310>)
 8000978:	f001 f959 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 8)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b08      	cmp	r3, #8
 8000980:	d128      	bne.n	80009d4 <display7SEG+0x2bc>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	2180      	movs	r1, #128	; 0x80
 8000986:	4828      	ldr	r0, [pc, #160]	; (8000a28 <display7SEG+0x310>)
 8000988:	f001 f951 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000992:	4825      	ldr	r0, [pc, #148]	; (8000a28 <display7SEG+0x310>)
 8000994:	f001 f94b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 8000998:	2200      	movs	r2, #0
 800099a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800099e:	4822      	ldr	r0, [pc, #136]	; (8000a28 <display7SEG+0x310>)
 80009a0:	f001 f945 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009aa:	481f      	ldr	r0, [pc, #124]	; (8000a28 <display7SEG+0x310>)
 80009ac:	f001 f93f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009b6:	481c      	ldr	r0, [pc, #112]	; (8000a28 <display7SEG+0x310>)
 80009b8:	f001 f939 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009c2:	4819      	ldr	r0, [pc, #100]	; (8000a28 <display7SEG+0x310>)
 80009c4:	f001 f933 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ce:	4816      	ldr	r0, [pc, #88]	; (8000a28 <display7SEG+0x310>)
 80009d0:	f001 f92d 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 9)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2b09      	cmp	r3, #9
 80009d8:	d122      	bne.n	8000a20 <display7SEG+0x308>
		{
			HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2180      	movs	r1, #128	; 0x80
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <display7SEG+0x310>)
 80009e0:	f001 f925 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009ea:	480f      	ldr	r0, [pc, #60]	; (8000a28 <display7SEG+0x310>)
 80009ec:	f001 f91f 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(C_GPIO_Port, C_Pin, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009f6:	480c      	ldr	r0, [pc, #48]	; (8000a28 <display7SEG+0x310>)
 80009f8:	f001 f919 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(D_GPIO_Port, D_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a02:	4809      	ldr	r0, [pc, #36]	; (8000a28 <display7SEG+0x310>)
 8000a04:	f001 f913 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(F_GPIO_Port, F_Pin, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <display7SEG+0x310>)
 8000a10:	f001 f90d 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(G_GPIO_Port, G_Pin, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <display7SEG+0x310>)
 8000a1c:	f001 f907 	bl	8001c2e <HAL_GPIO_WritePin>
		}
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40010800 	.word	0x40010800

08000a2c <display7SEG2>:

void display7SEG2(int num)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_SET);
 8000a34:	2201      	movs	r2, #1
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	48b0      	ldr	r0, [pc, #704]	; (8000cfc <display7SEG2+0x2d0>)
 8000a3c:	f001 f8f7 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	48ad      	ldr	r0, [pc, #692]	; (8000cfc <display7SEG2+0x2d0>)
 8000a48:	f001 f8f1 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2108      	movs	r1, #8
 8000a50:	48ab      	ldr	r0, [pc, #684]	; (8000d00 <display7SEG2+0x2d4>)
 8000a52:	f001 f8ec 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_SET);
 8000a56:	2201      	movs	r2, #1
 8000a58:	2110      	movs	r1, #16
 8000a5a:	48a9      	ldr	r0, [pc, #676]	; (8000d00 <display7SEG2+0x2d4>)
 8000a5c:	f001 f8e7 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_SET);
 8000a60:	2201      	movs	r2, #1
 8000a62:	2120      	movs	r1, #32
 8000a64:	48a6      	ldr	r0, [pc, #664]	; (8000d00 <display7SEG2+0x2d4>)
 8000a66:	f001 f8e2 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_SET);
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	2140      	movs	r1, #64	; 0x40
 8000a6e:	48a4      	ldr	r0, [pc, #656]	; (8000d00 <display7SEG2+0x2d4>)
 8000a70:	f001 f8dd 	bl	8001c2e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	48a1      	ldr	r0, [pc, #644]	; (8000d00 <display7SEG2+0x2d4>)
 8000a7a:	f001 f8d8 	bl	8001c2e <HAL_GPIO_WritePin>
		if (num == 0)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11f      	bne.n	8000ac4 <display7SEG2+0x98>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a8a:	489c      	ldr	r0, [pc, #624]	; (8000cfc <display7SEG2+0x2d0>)
 8000a8c:	f001 f8cf 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a96:	4899      	ldr	r0, [pc, #612]	; (8000cfc <display7SEG2+0x2d0>)
 8000a98:	f001 f8c9 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2108      	movs	r1, #8
 8000aa0:	4897      	ldr	r0, [pc, #604]	; (8000d00 <display7SEG2+0x2d4>)
 8000aa2:	f001 f8c4 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2110      	movs	r1, #16
 8000aaa:	4895      	ldr	r0, [pc, #596]	; (8000d00 <display7SEG2+0x2d4>)
 8000aac:	f001 f8bf 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2120      	movs	r1, #32
 8000ab4:	4892      	ldr	r0, [pc, #584]	; (8000d00 <display7SEG2+0x2d4>)
 8000ab6:	f001 f8ba 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2140      	movs	r1, #64	; 0x40
 8000abe:	4890      	ldr	r0, [pc, #576]	; (8000d00 <display7SEG2+0x2d4>)
 8000ac0:	f001 f8b5 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 1)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d10a      	bne.n	8000ae0 <display7SEG2+0xb4>
		{
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ad0:	488a      	ldr	r0, [pc, #552]	; (8000cfc <display7SEG2+0x2d0>)
 8000ad2:	f001 f8ac 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2108      	movs	r1, #8
 8000ada:	4889      	ldr	r0, [pc, #548]	; (8000d00 <display7SEG2+0x2d4>)
 8000adc:	f001 f8a7 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d11a      	bne.n	8000b1c <display7SEG2+0xf0>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aec:	4883      	ldr	r0, [pc, #524]	; (8000cfc <display7SEG2+0x2d0>)
 8000aee:	f001 f89e 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af8:	4880      	ldr	r0, [pc, #512]	; (8000cfc <display7SEG2+0x2d0>)
 8000afa:	f001 f898 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	2110      	movs	r1, #16
 8000b02:	487f      	ldr	r0, [pc, #508]	; (8000d00 <display7SEG2+0x2d4>)
 8000b04:	f001 f893 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2120      	movs	r1, #32
 8000b0c:	487c      	ldr	r0, [pc, #496]	; (8000d00 <display7SEG2+0x2d4>)
 8000b0e:	f001 f88e 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	2180      	movs	r1, #128	; 0x80
 8000b16:	487a      	ldr	r0, [pc, #488]	; (8000d00 <display7SEG2+0x2d4>)
 8000b18:	f001 f889 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 3)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d11a      	bne.n	8000b58 <display7SEG2+0x12c>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b28:	4874      	ldr	r0, [pc, #464]	; (8000cfc <display7SEG2+0x2d0>)
 8000b2a:	f001 f880 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b34:	4871      	ldr	r0, [pc, #452]	; (8000cfc <display7SEG2+0x2d0>)
 8000b36:	f001 f87a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2108      	movs	r1, #8
 8000b3e:	4870      	ldr	r0, [pc, #448]	; (8000d00 <display7SEG2+0x2d4>)
 8000b40:	f001 f875 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2110      	movs	r1, #16
 8000b48:	486d      	ldr	r0, [pc, #436]	; (8000d00 <display7SEG2+0x2d4>)
 8000b4a:	f001 f870 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	486b      	ldr	r0, [pc, #428]	; (8000d00 <display7SEG2+0x2d4>)
 8000b54:	f001 f86b 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 4)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2b04      	cmp	r3, #4
 8000b5c:	d114      	bne.n	8000b88 <display7SEG2+0x15c>
		{
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b64:	4865      	ldr	r0, [pc, #404]	; (8000cfc <display7SEG2+0x2d0>)
 8000b66:	f001 f862 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2108      	movs	r1, #8
 8000b6e:	4864      	ldr	r0, [pc, #400]	; (8000d00 <display7SEG2+0x2d4>)
 8000b70:	f001 f85d 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2140      	movs	r1, #64	; 0x40
 8000b78:	4861      	ldr	r0, [pc, #388]	; (8000d00 <display7SEG2+0x2d4>)
 8000b7a:	f001 f858 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	485f      	ldr	r0, [pc, #380]	; (8000d00 <display7SEG2+0x2d4>)
 8000b84:	f001 f853 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 5)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b05      	cmp	r3, #5
 8000b8c:	d119      	bne.n	8000bc2 <display7SEG2+0x196>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4859      	ldr	r0, [pc, #356]	; (8000cfc <display7SEG2+0x2d0>)
 8000b96:	f001 f84a 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2108      	movs	r1, #8
 8000b9e:	4858      	ldr	r0, [pc, #352]	; (8000d00 <display7SEG2+0x2d4>)
 8000ba0:	f001 f845 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4855      	ldr	r0, [pc, #340]	; (8000d00 <display7SEG2+0x2d4>)
 8000baa:	f001 f840 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2140      	movs	r1, #64	; 0x40
 8000bb2:	4853      	ldr	r0, [pc, #332]	; (8000d00 <display7SEG2+0x2d4>)
 8000bb4:	f001 f83b 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2180      	movs	r1, #128	; 0x80
 8000bbc:	4850      	ldr	r0, [pc, #320]	; (8000d00 <display7SEG2+0x2d4>)
 8000bbe:	f001 f836 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 6)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2b06      	cmp	r3, #6
 8000bc6:	d11e      	bne.n	8000c06 <display7SEG2+0x1da>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bce:	484b      	ldr	r0, [pc, #300]	; (8000cfc <display7SEG2+0x2d0>)
 8000bd0:	f001 f82d 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2108      	movs	r1, #8
 8000bd8:	4849      	ldr	r0, [pc, #292]	; (8000d00 <display7SEG2+0x2d4>)
 8000bda:	f001 f828 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	4847      	ldr	r0, [pc, #284]	; (8000d00 <display7SEG2+0x2d4>)
 8000be4:	f001 f823 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_RESET);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2120      	movs	r1, #32
 8000bec:	4844      	ldr	r0, [pc, #272]	; (8000d00 <display7SEG2+0x2d4>)
 8000bee:	f001 f81e 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	4842      	ldr	r0, [pc, #264]	; (8000d00 <display7SEG2+0x2d4>)
 8000bf8:	f001 f819 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	483f      	ldr	r0, [pc, #252]	; (8000d00 <display7SEG2+0x2d4>)
 8000c02:	f001 f814 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 7)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b07      	cmp	r3, #7
 8000c0a:	d113      	bne.n	8000c34 <display7SEG2+0x208>
		{
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	2110      	movs	r1, #16
 8000c10:	483b      	ldr	r0, [pc, #236]	; (8000d00 <display7SEG2+0x2d4>)
 8000c12:	f001 f80c 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_SET);
 8000c16:	2201      	movs	r2, #1
 8000c18:	2120      	movs	r1, #32
 8000c1a:	4839      	ldr	r0, [pc, #228]	; (8000d00 <display7SEG2+0x2d4>)
 8000c1c:	f001 f807 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2140      	movs	r1, #64	; 0x40
 8000c24:	4836      	ldr	r0, [pc, #216]	; (8000d00 <display7SEG2+0x2d4>)
 8000c26:	f001 f802 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	4834      	ldr	r0, [pc, #208]	; (8000d00 <display7SEG2+0x2d4>)
 8000c30:	f000 fffd 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 7)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b07      	cmp	r3, #7
 8000c38:	d110      	bne.n	8000c5c <display7SEG2+0x230>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c40:	482e      	ldr	r0, [pc, #184]	; (8000cfc <display7SEG2+0x2d0>)
 8000c42:	f000 fff4 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4c:	482b      	ldr	r0, [pc, #172]	; (8000cfc <display7SEG2+0x2d0>)
 8000c4e:	f000 ffee 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2108      	movs	r1, #8
 8000c56:	482a      	ldr	r0, [pc, #168]	; (8000d00 <display7SEG2+0x2d4>)
 8000c58:	f000 ffe9 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 8)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b08      	cmp	r3, #8
 8000c60:	d124      	bne.n	8000cac <display7SEG2+0x280>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c68:	4824      	ldr	r0, [pc, #144]	; (8000cfc <display7SEG2+0x2d0>)
 8000c6a:	f000 ffe0 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c74:	4821      	ldr	r0, [pc, #132]	; (8000cfc <display7SEG2+0x2d0>)
 8000c76:	f000 ffda 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2108      	movs	r1, #8
 8000c7e:	4820      	ldr	r0, [pc, #128]	; (8000d00 <display7SEG2+0x2d4>)
 8000c80:	f000 ffd5 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2110      	movs	r1, #16
 8000c88:	481d      	ldr	r0, [pc, #116]	; (8000d00 <display7SEG2+0x2d4>)
 8000c8a:	f000 ffd0 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(L_GPIO_Port, L_Pin, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2120      	movs	r1, #32
 8000c92:	481b      	ldr	r0, [pc, #108]	; (8000d00 <display7SEG2+0x2d4>)
 8000c94:	f000 ffcb 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	4818      	ldr	r0, [pc, #96]	; (8000d00 <display7SEG2+0x2d4>)
 8000c9e:	f000 ffc6 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2180      	movs	r1, #128	; 0x80
 8000ca6:	4816      	ldr	r0, [pc, #88]	; (8000d00 <display7SEG2+0x2d4>)
 8000ca8:	f000 ffc1 	bl	8001c2e <HAL_GPIO_WritePin>
		}
		if (num == 9)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d11f      	bne.n	8000cf2 <display7SEG2+0x2c6>
		{
			HAL_GPIO_WritePin(H_GPIO_Port, H_Pin, GPIO_PIN_RESET);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cb8:	4810      	ldr	r0, [pc, #64]	; (8000cfc <display7SEG2+0x2d0>)
 8000cba:	f000 ffb8 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(I_GPIO_Port, I_Pin, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <display7SEG2+0x2d0>)
 8000cc6:	f000 ffb2 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(J_GPIO_Port, J_Pin, GPIO_PIN_RESET);
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2108      	movs	r1, #8
 8000cce:	480c      	ldr	r0, [pc, #48]	; (8000d00 <display7SEG2+0x2d4>)
 8000cd0:	f000 ffad 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(K_GPIO_Port, K_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <display7SEG2+0x2d4>)
 8000cda:	f000 ffa8 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(M_GPIO_Port, M_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2140      	movs	r1, #64	; 0x40
 8000ce2:	4807      	ldr	r0, [pc, #28]	; (8000d00 <display7SEG2+0x2d4>)
 8000ce4:	f000 ffa3 	bl	8001c2e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(N_GPIO_Port, N_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <display7SEG2+0x2d4>)
 8000cee:	f000 ff9e 	bl	8001c2e <HAL_GPIO_WritePin>
		}
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40010800 	.word	0x40010800
 8000d00:	40010c00 	.word	0x40010c00

08000d04 <led7_segment_run>:

void led7_segment_run()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
//	if (timerFlag[0] == 1)
//	{
//		setTimer(50, 0);
		switch(time_buffer_idx)
 8000d08:	4b35      	ldr	r3, [pc, #212]	; (8000de0 <led7_segment_run+0xdc>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <led7_segment_run+0x12>
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d031      	beq.n	8000d78 <led7_segment_run+0x74>

				time_buffer_idx = 0;
				break;
		}
//	}
}
 8000d14:	e061      	b.n	8000dda <led7_segment_run+0xd6>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d1c:	4831      	ldr	r0, [pc, #196]	; (8000de4 <led7_segment_run+0xe0>)
 8000d1e:	f000 ff86 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d28:	482e      	ldr	r0, [pc, #184]	; (8000de4 <led7_segment_run+0xe0>)
 8000d2a:	f000 ff80 	bl	8001c2e <HAL_GPIO_WritePin>
				display7SEG(time_buffer[time_buffer_idx] / 10);
 8000d2e:	4b2c      	ldr	r3, [pc, #176]	; (8000de0 <led7_segment_run+0xdc>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a2d      	ldr	r2, [pc, #180]	; (8000de8 <led7_segment_run+0xe4>)
 8000d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d38:	4a2c      	ldr	r2, [pc, #176]	; (8000dec <led7_segment_run+0xe8>)
 8000d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8000d3e:	1092      	asrs	r2, r2, #2
 8000d40:	17db      	asrs	r3, r3, #31
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff fce7 	bl	8000718 <display7SEG>
				display7SEG2(time_buffer[time_buffer_idx] % 10);
 8000d4a:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <led7_segment_run+0xdc>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a26      	ldr	r2, [pc, #152]	; (8000de8 <led7_segment_run+0xe4>)
 8000d50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <led7_segment_run+0xe8>)
 8000d56:	fb83 1302 	smull	r1, r3, r3, r2
 8000d5a:	1099      	asrs	r1, r3, #2
 8000d5c:	17d3      	asrs	r3, r2, #31
 8000d5e:	1ac9      	subs	r1, r1, r3
 8000d60:	460b      	mov	r3, r1
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	440b      	add	r3, r1
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	1ad1      	subs	r1, r2, r3
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	f7ff fe5e 	bl	8000a2c <display7SEG2>
				time_buffer_idx = 1;
 8000d70:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <led7_segment_run+0xdc>)
 8000d72:	2201      	movs	r2, #1
 8000d74:	601a      	str	r2, [r3, #0]
				break;
 8000d76:	e030      	b.n	8000dda <led7_segment_run+0xd6>
				HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <led7_segment_run+0xe0>)
 8000d80:	f000 ff55 	bl	8001c2e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d8a:	4816      	ldr	r0, [pc, #88]	; (8000de4 <led7_segment_run+0xe0>)
 8000d8c:	f000 ff4f 	bl	8001c2e <HAL_GPIO_WritePin>
				display7SEG(time_buffer[time_buffer_idx] / 10);
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <led7_segment_run+0xdc>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a14      	ldr	r2, [pc, #80]	; (8000de8 <led7_segment_run+0xe4>)
 8000d96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <led7_segment_run+0xe8>)
 8000d9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000da0:	1092      	asrs	r2, r2, #2
 8000da2:	17db      	asrs	r3, r3, #31
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fcb6 	bl	8000718 <display7SEG>
				display7SEG2(time_buffer[time_buffer_idx] % 10);
 8000dac:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <led7_segment_run+0xdc>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <led7_segment_run+0xe4>)
 8000db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000db6:	4b0d      	ldr	r3, [pc, #52]	; (8000dec <led7_segment_run+0xe8>)
 8000db8:	fb83 1302 	smull	r1, r3, r3, r2
 8000dbc:	1099      	asrs	r1, r3, #2
 8000dbe:	17d3      	asrs	r3, r2, #31
 8000dc0:	1ac9      	subs	r1, r1, r3
 8000dc2:	460b      	mov	r3, r1
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	1ad1      	subs	r1, r2, r3
 8000dcc:	4608      	mov	r0, r1
 8000dce:	f7ff fe2d 	bl	8000a2c <display7SEG2>
				time_buffer_idx = 0;
 8000dd2:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <led7_segment_run+0xdc>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
				break;
 8000dd8:	bf00      	nop
}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	200000ec 	.word	0x200000ec
 8000de4:	40010c00 	.word	0x40010c00
 8000de8:	20000104 	.word	0x20000104
 8000dec:	66666667 	.word	0x66666667

08000df0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000df4:	f000 fc1a 	bl	800162c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df8:	f000 f838 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dfc:	f000 f8be 	bl	8000f7c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000e00:	f000 f870 	bl	8000ee4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e04:	4813      	ldr	r0, [pc, #76]	; (8000e54 <main+0x64>)
 8000e06:	f001 fb6f 	bl	80024e8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 8000e0a:	f000 f93b 	bl	8001084 <SCH_Init>
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e14:	4810      	ldr	r0, [pc, #64]	; (8000e58 <main+0x68>)
 8000e16:	f000 ff0a 	bl	8001c2e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e20:	480d      	ldr	r0, [pc, #52]	; (8000e58 <main+0x68>)
 8000e22:	f000 ff04 	bl	8001c2e <HAL_GPIO_WritePin>

  SCH_Add_Task(update_buffer, 100, 100);
 8000e26:	2264      	movs	r2, #100	; 0x64
 8000e28:	2164      	movs	r1, #100	; 0x64
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <main+0x6c>)
 8000e2c:	f000 f9ae 	bl	800118c <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic_run, 0, 1);
 8000e30:	2201      	movs	r2, #1
 8000e32:	2100      	movs	r1, #0
 8000e34:	480a      	ldr	r0, [pc, #40]	; (8000e60 <main+0x70>)
 8000e36:	f000 f9a9 	bl	800118c <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 25);
 8000e3a:	2219      	movs	r2, #25
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4809      	ldr	r0, [pc, #36]	; (8000e64 <main+0x74>)
 8000e40:	f000 f9a4 	bl	800118c <SCH_Add_Task>
  SCH_Add_Task(led7_segment_run, 5, 50);
 8000e44:	2232      	movs	r2, #50	; 0x32
 8000e46:	2105      	movs	r1, #5
 8000e48:	4807      	ldr	r0, [pc, #28]	; (8000e68 <main+0x78>)
 8000e4a:	f000 f99f 	bl	800118c <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatcher();
 8000e4e:	f000 fa47 	bl	80012e0 <SCH_Dispatcher>
 8000e52:	e7fc      	b.n	8000e4e <main+0x5e>
 8000e54:	2000010c 	.word	0x2000010c
 8000e58:	40010c00 	.word	0x40010c00
 8000e5c:	080002c5 	.word	0x080002c5
 8000e60:	080002e9 	.word	0x080002e9
 8000e64:	080004ad 	.word	0x080004ad
 8000e68:	08000d05 	.word	0x08000d05

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b090      	sub	sp, #64	; 0x40
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 0318 	add.w	r3, r7, #24
 8000e76:	2228      	movs	r2, #40	; 0x28
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fefa 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
 8000e8c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e92:	2301      	movs	r3, #1
 8000e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e96:	2310      	movs	r3, #16
 8000e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e9e:	f107 0318 	add.w	r3, r7, #24
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 fef4 	bl	8001c90 <HAL_RCC_OscConfig>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000eae:	f000 f8e3 	bl	8001078 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eb2:	230f      	movs	r3, #15
 8000eb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ec6:	1d3b      	adds	r3, r7, #4
 8000ec8:	2100      	movs	r1, #0
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f001 f960 	bl	8002190 <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ed6:	f000 f8cf 	bl	8001078 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3740      	adds	r7, #64	; 0x40
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0308 	add.w	r3, r7, #8
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ef8:	463b      	mov	r3, r7
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f0a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000f0e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000f16:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f18:	2209      	movs	r2, #9
 8000f1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f28:	4813      	ldr	r0, [pc, #76]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f2a:	f001 fa8d 	bl	8002448 <HAL_TIM_Base_Init>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000f34:	f000 f8a0 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f3e:	f107 0308 	add.w	r3, r7, #8
 8000f42:	4619      	mov	r1, r3
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f46:	f001 fc0b 	bl	8002760 <HAL_TIM_ConfigClockSource>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 f892 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f54:	2300      	movs	r3, #0
 8000f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_TIM2_Init+0x94>)
 8000f62:	f001 fde3 	bl	8002b2c <HAL_TIMEx_MasterConfigSynchronization>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f6c:	f000 f884 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f70:	bf00      	nop
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	2000010c 	.word	0x2000010c

08000f7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f90:	4b2f      	ldr	r3, [pc, #188]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a2e      	ldr	r2, [pc, #184]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000f96:	f043 0310 	orr.w	r3, r3, #16
 8000f9a:	6193      	str	r3, [r2, #24]
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000f9e:	699b      	ldr	r3, [r3, #24]
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa8:	4b29      	ldr	r3, [pc, #164]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	4a28      	ldr	r2, [pc, #160]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	6193      	str	r3, [r2, #24]
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	f003 0304 	and.w	r3, r3, #4
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000fc6:	f043 0308 	orr.w	r3, r3, #8
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_GPIO_Init+0xd4>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0308 	and.w	r3, r3, #8
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
 8000fd8:	2200      	movs	r2, #0
 8000fda:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <MX_GPIO_Init+0xd8>)
 8000fe0:	f000 fe25 	bl	8001c2e <HAL_GPIO_WritePin>
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|A_Pin|B_Pin
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|H_Pin|I_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, J_Pin|K_Pin|L_Pin|M_Pin
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8000fea:	481b      	ldr	r0, [pc, #108]	; (8001058 <MX_GPIO_Init+0xdc>)
 8000fec:	f000 fe1f 	bl	8001c2e <HAL_GPIO_WritePin>
                          |N_Pin|EN0_Pin|EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON0_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON0_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000ff0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ff4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ffe:	f107 0310 	add.w	r3, r7, #16
 8001002:	4619      	mov	r1, r3
 8001004:	4815      	ldr	r0, [pc, #84]	; (800105c <MX_GPIO_Init+0xe0>)
 8001006:	f000 fc81 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin LED_RED1_Pin
                           LED_YELLOW1_Pin LED_GREEN1_Pin A_Pin B_Pin
                           C_Pin D_Pin E_Pin F_Pin
                           G_Pin H_Pin I_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|LED_RED1_Pin
 800100a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800100e:	613b      	str	r3, [r7, #16]
                          |LED_YELLOW1_Pin|LED_GREEN1_Pin|A_Pin|B_Pin
                          |C_Pin|D_Pin|E_Pin|F_Pin
                          |G_Pin|H_Pin|I_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001010:	2301      	movs	r3, #1
 8001012:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101c:	f107 0310 	add.w	r3, r7, #16
 8001020:	4619      	mov	r1, r3
 8001022:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_GPIO_Init+0xd8>)
 8001024:	f000 fc72 	bl	800190c <HAL_GPIO_Init>

  /*Configure GPIO pins : J_Pin K_Pin L_Pin M_Pin
                           N_Pin EN0_Pin EN1_Pin */
  GPIO_InitStruct.Pin = J_Pin|K_Pin|L_Pin|M_Pin
 8001028:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800102c:	613b      	str	r3, [r7, #16]
                          |N_Pin|EN0_Pin|EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2302      	movs	r3, #2
 8001038:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 0310 	add.w	r3, r7, #16
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_GPIO_Init+0xdc>)
 8001042:	f000 fc63 	bl	800190c <HAL_GPIO_Init>

}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800
 8001058:	40010c00 	.word	0x40010c00
 800105c:	40011000 	.word	0x40011000

08001060 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001068:	f000 f81a 	bl	80010a0 <SCH_Update>
	getKeyInput();
 800106c:	f7ff f898 	bl	80001a0 <getKeyInput>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <SCH_Init>:

TaskList_t TaskList;
uint32_t TaskIDCounter = 0;

void SCH_Init()
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	TaskList.head = NULL;
 8001088:	4b04      	ldr	r3, [pc, #16]	; (800109c <SCH_Init+0x18>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	TaskList.size = 0;
 800108e:	4b03      	ldr	r3, [pc, #12]	; (800109c <SCH_Init+0x18>)
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000154 	.word	0x20000154

080010a0 <SCH_Update>:

void SCH_Update()
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0

	if(TaskList.size && TaskList.head->Delay > 0) TaskList.head->Delay--;
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <SCH_Update+0x28>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d009      	beq.n	80010c0 <SCH_Update+0x20>
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <SCH_Update+0x28>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d004      	beq.n	80010c0 <SCH_Update+0x20>
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SCH_Update+0x28>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	3a01      	subs	r2, #1
 80010be:	609a      	str	r2, [r3, #8]
}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr
 80010c8:	20000154 	.word	0x20000154

080010cc <addTask>:

int addTask(TaskControlBlock_t * task)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
    if(TaskList.size >= SCH_MAX_TASKS)
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <addTask+0xbc>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b1f      	cmp	r3, #31
 80010da:	dd01      	ble.n	80010e0 <addTask+0x14>
    {
        return 1;
 80010dc:	2301      	movs	r3, #1
 80010de:	e04d      	b.n	800117c <addTask+0xb0>
    }
    if(TaskList.size == 0){
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <addTask+0xbc>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d109      	bne.n	80010fc <addTask+0x30>
        TaskList.head = task;
 80010e8:	4a27      	ldr	r2, [pc, #156]	; (8001188 <addTask+0xbc>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6013      	str	r3, [r2, #0]
        TaskList.size++;
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <addTask+0xbc>)
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a24      	ldr	r2, [pc, #144]	; (8001188 <addTask+0xbc>)
 80010f6:	6053      	str	r3, [r2, #4]
        return 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e03f      	b.n	800117c <addTask+0xb0>
    }

    TaskControlBlock_t * curr = TaskList.head;
 80010fc:	4b22      	ldr	r3, [pc, #136]	; (8001188 <addTask+0xbc>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	617b      	str	r3, [r7, #20]
    TaskControlBlock_t * prev = NULL;
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
    int found = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
    while(!found)
 800110a:	e033      	b.n	8001174 <addTask+0xa8>
    {
        if(curr != NULL && task-> Delay >= curr-> Delay)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d012      	beq.n	8001138 <addTask+0x6c>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	689a      	ldr	r2, [r3, #8]
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	429a      	cmp	r2, r3
 800111c:	d30c      	bcc.n	8001138 <addTask+0x6c>
        {
            task -> Delay -= curr -> Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	609a      	str	r2, [r3, #8]
            prev = curr;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
            curr = curr -> NextTask;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	617b      	str	r3, [r7, #20]
 8001136:	e01d      	b.n	8001174 <addTask+0xa8>
        }
        else
        {
            task -> NextTask = curr;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	611a      	str	r2, [r3, #16]

            if(prev != NULL) prev->NextTask = task;
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d003      	beq.n	800114c <addTask+0x80>
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	611a      	str	r2, [r3, #16]
 800114a:	e002      	b.n	8001152 <addTask+0x86>
            else TaskList.head = task;
 800114c:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <addTask+0xbc>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]

            if(curr != NULL) curr -> Delay -= task->Delay;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d006      	beq.n	8001166 <addTask+0x9a>
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	689a      	ldr	r2, [r3, #8]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	1ad2      	subs	r2, r2, r3
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	609a      	str	r2, [r3, #8]
            TaskList.size++;
 8001166:	4b08      	ldr	r3, [pc, #32]	; (8001188 <addTask+0xbc>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	3301      	adds	r3, #1
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <addTask+0xbc>)
 800116e:	6053      	str	r3, [r2, #4]
            found = 1;
 8001170:	2301      	movs	r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
    while(!found)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d0c8      	beq.n	800110c <addTask+0x40>
        }
    }
    return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	371c      	adds	r7, #28
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	20000154 	.word	0x20000154

0800118c <SCH_Add_Task>:

void SCH_Add_Task(void (*functionPointer)(), unsigned int DELAY, unsigned int PERIOD)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
	TaskControlBlock_t * task = (TaskControlBlock_t *)malloc(sizeof(TaskControlBlock_t));
 8001198:	2014      	movs	r0, #20
 800119a:	f001 fd5b 	bl	8002c54 <malloc>
 800119e:	4603      	mov	r3, r0
 80011a0:	617b      	str	r3, [r7, #20]

	task -> Delay 		= DELAY;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	68ba      	ldr	r2, [r7, #8]
 80011a6:	609a      	str	r2, [r3, #8]
	task -> Period 		= PERIOD;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	60da      	str	r2, [r3, #12]
	task -> TaskID 		= (++TaskIDCounter)%256;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	; (80011dc <SCH_Add_Task+0x50>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <SCH_Add_Task+0x50>)
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <SCH_Add_Task+0x50>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	605a      	str	r2, [r3, #4]
	task -> TaskPointer = functionPointer;
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	68fa      	ldr	r2, [r7, #12]
 80011c6:	601a      	str	r2, [r3, #0]
	task -> NextTask 	= NULL;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]

	addTask(task);
 80011ce:	6978      	ldr	r0, [r7, #20]
 80011d0:	f7ff ff7c 	bl	80010cc <addTask>
}
 80011d4:	bf00      	nop
 80011d6:	3718      	adds	r7, #24
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000f4 	.word	0x200000f4

080011e0 <SCH_DeleteTask>:

void SCH_DeleteTask(uint32_t ID)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
	if(TaskList.size == 0)
 80011e8:	4b3c      	ldr	r3, [pc, #240]	; (80012dc <SCH_DeleteTask+0xfc>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d070      	beq.n	80012d2 <SCH_DeleteTask+0xf2>
	{
		return;
	}

	TaskControlBlock_t * curr = TaskList.head;
 80011f0:	4b3a      	ldr	r3, [pc, #232]	; (80012dc <SCH_DeleteTask+0xfc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	60fb      	str	r3, [r7, #12]
	TaskControlBlock_t * prev = NULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60bb      	str	r3, [r7, #8]

	while(curr != NULL)
 80011fa:	e066      	b.n	80012ca <SCH_DeleteTask+0xea>
	{
		if(ID == curr -> TaskID)
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	429a      	cmp	r2, r3
 8001204:	d15c      	bne.n	80012c0 <SCH_DeleteTask+0xe0>
		{
			if(prev == NULL && curr -> NextTask == NULL)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d111      	bne.n	8001230 <SCH_DeleteTask+0x50>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	691b      	ldr	r3, [r3, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d10d      	bne.n	8001230 <SCH_DeleteTask+0x50>
			{
				free(curr);
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f001 fd25 	bl	8002c64 <free>
				TaskList.head = NULL;
 800121a:	4b30      	ldr	r3, [pc, #192]	; (80012dc <SCH_DeleteTask+0xfc>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
				TaskList.size--;
 8001220:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <SCH_DeleteTask+0xfc>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	3b01      	subs	r3, #1
 8001226:	4a2d      	ldr	r2, [pc, #180]	; (80012dc <SCH_DeleteTask+0xfc>)
 8001228:	6053      	str	r3, [r2, #4]
				curr = NULL;
 800122a:	2300      	movs	r3, #0
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	e04c      	b.n	80012ca <SCH_DeleteTask+0xea>
			}
			else if (prev == NULL)
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d117      	bne.n	8001266 <SCH_DeleteTask+0x86>
			{
				curr -> NextTask -> Delay += curr -> Delay;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	6899      	ldr	r1, [r3, #8]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	440a      	add	r2, r1
 8001246:	609a      	str	r2, [r3, #8]
				TaskList.head = curr -> NextTask;
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	4a23      	ldr	r2, [pc, #140]	; (80012dc <SCH_DeleteTask+0xfc>)
 800124e:	6013      	str	r3, [r2, #0]
				free(curr);
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f001 fd07 	bl	8002c64 <free>
				TaskList.size--;
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <SCH_DeleteTask+0xfc>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <SCH_DeleteTask+0xfc>)
 800125e:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	e031      	b.n	80012ca <SCH_DeleteTask+0xea>
			}
			else if (curr -> NextTask == NULL)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10d      	bne.n	800128a <SCH_DeleteTask+0xaa>
			{
				free(curr);
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	f001 fcf8 	bl	8002c64 <free>
				prev -> NextTask = NULL;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
				TaskList.size--;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <SCH_DeleteTask+0xfc>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <SCH_DeleteTask+0xfc>)
 8001282:	6053      	str	r3, [r2, #4]
				curr = NULL;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	e01f      	b.n	80012ca <SCH_DeleteTask+0xea>
			}
			else
			{
				curr -> NextTask -> Delay += curr -> Delay;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	6899      	ldr	r1, [r3, #8]
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	440a      	add	r2, r1
 800129a:	609a      	str	r2, [r3, #8]
				prev -> NextTask = curr -> NextTask;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	611a      	str	r2, [r3, #16]
				curr -> NextTask = NULL;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
				free(curr);
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f001 fcda 	bl	8002c64 <free>
				TaskList.size--;
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <SCH_DeleteTask+0xfc>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <SCH_DeleteTask+0xfc>)
 80012b8:	6053      	str	r3, [r2, #4]

				curr = NULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	e004      	b.n	80012ca <SCH_DeleteTask+0xea>
			}

		}
		else
		{
			prev = curr;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	60bb      	str	r3, [r7, #8]
			curr = curr -> NextTask;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	60fb      	str	r3, [r7, #12]
	while(curr != NULL)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d195      	bne.n	80011fc <SCH_DeleteTask+0x1c>
 80012d0:	e000      	b.n	80012d4 <SCH_DeleteTask+0xf4>
		return;
 80012d2:	bf00      	nop
		}
	}
}
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000154 	.word	0x20000154

080012e0 <SCH_Dispatcher>:



void SCH_Dispatcher(){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	while(TaskList.size != 0 &&TaskList.head -> Delay == 0){
 80012e4:	e01a      	b.n	800131c <SCH_Dispatcher+0x3c>
		(*TaskList.head -> TaskPointer)();
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <SCH_Dispatcher+0x54>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4798      	blx	r3
		if(TaskList.head -> Period) SCH_Add_Task(TaskList.head -> TaskPointer, TaskList.head -> Period, TaskList.head -> Period);
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <SCH_Dispatcher+0x54>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d00b      	beq.n	8001310 <SCH_Dispatcher+0x30>
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <SCH_Dispatcher+0x54>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <SCH_Dispatcher+0x54>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68d9      	ldr	r1, [r3, #12]
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <SCH_Dispatcher+0x54>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	461a      	mov	r2, r3
 800130c:	f7ff ff3e 	bl	800118c <SCH_Add_Task>
		SCH_DeleteTask(TaskList.head -> TaskID);
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <SCH_Dispatcher+0x54>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff ff62 	bl	80011e0 <SCH_DeleteTask>
	while(TaskList.size != 0 &&TaskList.head -> Delay == 0){
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SCH_Dispatcher+0x54>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <SCH_Dispatcher+0x4e>
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <SCH_Dispatcher+0x54>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0db      	beq.n	80012e6 <SCH_Dispatcher+0x6>
	}
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000154 	.word	0x20000154

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_MspInit+0x5c>)
 8001340:	699b      	ldr	r3, [r3, #24]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <HAL_MspInit+0x5c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6193      	str	r3, [r2, #24]
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_MspInit+0x5c>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <HAL_MspInit+0x5c>)
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <HAL_MspInit+0x5c>)
 800135c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001360:	61d3      	str	r3, [r2, #28]
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <HAL_MspInit+0x5c>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800136a:	607b      	str	r3, [r7, #4]
 800136c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_MspInit+0x60>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4a04      	ldr	r2, [pc, #16]	; (8001398 <HAL_MspInit+0x60>)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800138a:	bf00      	nop
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr
 8001394:	40021000 	.word	0x40021000
 8001398:	40010000 	.word	0x40010000

0800139c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013ac:	d113      	bne.n	80013d6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013b0:	69db      	ldr	r3, [r3, #28]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	61d3      	str	r3, [r2, #28]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_TIM_Base_MspInit+0x44>)
 80013bc:	69db      	ldr	r3, [r3, #28]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	201c      	movs	r0, #28
 80013cc:	f000 fa67 	bl	800189e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013d0:	201c      	movs	r0, #28
 80013d2:	f000 fa80 	bl	80018d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40021000 	.word	0x40021000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f000 f945 	bl	80016b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001438:	4802      	ldr	r0, [pc, #8]	; (8001444 <TIM2_IRQHandler+0x10>)
 800143a:	f001 f8a1 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	2000010c 	.word	0x2000010c

08001448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001450:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_sbrk+0x5c>)
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <_sbrk+0x60>)
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800145c:	4b13      	ldr	r3, [pc, #76]	; (80014ac <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d102      	bne.n	800146a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <_sbrk+0x64>)
 8001466:	4a12      	ldr	r2, [pc, #72]	; (80014b0 <_sbrk+0x68>)
 8001468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146a:	4b10      	ldr	r3, [pc, #64]	; (80014ac <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	429a      	cmp	r2, r3
 8001476:	d207      	bcs.n	8001488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001478:	f001 fbc2 	bl	8002c00 <__errno>
 800147c:	4603      	mov	r3, r0
 800147e:	220c      	movs	r2, #12
 8001480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001482:	f04f 33ff 	mov.w	r3, #4294967295
 8001486:	e009      	b.n	800149c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001488:	4b08      	ldr	r3, [pc, #32]	; (80014ac <_sbrk+0x64>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148e:	4b07      	ldr	r3, [pc, #28]	; (80014ac <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	4a05      	ldr	r2, [pc, #20]	; (80014ac <_sbrk+0x64>)
 8001498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149a:	68fb      	ldr	r3, [r7, #12]
}
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20002800 	.word	0x20002800
 80014a8:	00000400 	.word	0x00000400
 80014ac:	200000f8 	.word	0x200000f8
 80014b0:	20000170 	.word	0x20000170

080014b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <red_green>:
 */

#include "traffic_light.h"

void red_green()
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2102      	movs	r1, #2
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <red_green+0x44>)
 80014ca:	f000 fbb0 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2104      	movs	r1, #4
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <red_green+0x44>)
 80014d4:	f000 fbab 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80014d8:	2201      	movs	r2, #1
 80014da:	2108      	movs	r1, #8
 80014dc:	4809      	ldr	r0, [pc, #36]	; (8001504 <red_green+0x44>)
 80014de:	f000 fba6 	bl	8001c2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2110      	movs	r1, #16
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <red_green+0x44>)
 80014e8:	f000 fba1 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2120      	movs	r1, #32
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <red_green+0x44>)
 80014f2:	f000 fb9c 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2140      	movs	r1, #64	; 0x40
 80014fa:	4802      	ldr	r0, [pc, #8]	; (8001504 <red_green+0x44>)
 80014fc:	f000 fb97 	bl	8001c2e <HAL_GPIO_WritePin>
}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40010800 	.word	0x40010800

08001508 <red_yellow>:

void red_yellow()
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	2102      	movs	r1, #2
 8001510:	480e      	ldr	r0, [pc, #56]	; (800154c <red_yellow+0x44>)
 8001512:	f000 fb8c 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8001516:	2201      	movs	r2, #1
 8001518:	2104      	movs	r1, #4
 800151a:	480c      	ldr	r0, [pc, #48]	; (800154c <red_yellow+0x44>)
 800151c:	f000 fb87 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2108      	movs	r1, #8
 8001524:	4809      	ldr	r0, [pc, #36]	; (800154c <red_yellow+0x44>)
 8001526:	f000 fb82 	bl	8001c2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 800152a:	2201      	movs	r2, #1
 800152c:	2110      	movs	r1, #16
 800152e:	4807      	ldr	r0, [pc, #28]	; (800154c <red_yellow+0x44>)
 8001530:	f000 fb7d 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 8001534:	2200      	movs	r2, #0
 8001536:	2120      	movs	r1, #32
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <red_yellow+0x44>)
 800153a:	f000 fb78 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 800153e:	2201      	movs	r2, #1
 8001540:	2140      	movs	r1, #64	; 0x40
 8001542:	4802      	ldr	r0, [pc, #8]	; (800154c <red_yellow+0x44>)
 8001544:	f000 fb73 	bl	8001c2e <HAL_GPIO_WritePin>
}
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	40010800 	.word	0x40010800

08001550 <green_red>:

void green_red()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001554:	2201      	movs	r2, #1
 8001556:	2102      	movs	r1, #2
 8001558:	480e      	ldr	r0, [pc, #56]	; (8001594 <green_red+0x44>)
 800155a:	f000 fb68 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 800155e:	2201      	movs	r2, #1
 8001560:	2104      	movs	r1, #4
 8001562:	480c      	ldr	r0, [pc, #48]	; (8001594 <green_red+0x44>)
 8001564:	f000 fb63 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2108      	movs	r1, #8
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <green_red+0x44>)
 800156e:	f000 fb5e 	bl	8001c2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2110      	movs	r1, #16
 8001576:	4807      	ldr	r0, [pc, #28]	; (8001594 <green_red+0x44>)
 8001578:	f000 fb59 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2120      	movs	r1, #32
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <green_red+0x44>)
 8001582:	f000 fb54 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8001586:	2201      	movs	r2, #1
 8001588:	2140      	movs	r1, #64	; 0x40
 800158a:	4802      	ldr	r0, [pc, #8]	; (8001594 <green_red+0x44>)
 800158c:	f000 fb4f 	bl	8001c2e <HAL_GPIO_WritePin>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40010800 	.word	0x40010800

08001598 <yellow_red>:

void yellow_red()
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 800159c:	2201      	movs	r2, #1
 800159e:	2102      	movs	r1, #2
 80015a0:	480e      	ldr	r0, [pc, #56]	; (80015dc <yellow_red+0x44>)
 80015a2:	f000 fb44 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2104      	movs	r1, #4
 80015aa:	480c      	ldr	r0, [pc, #48]	; (80015dc <yellow_red+0x44>)
 80015ac:	f000 fb3f 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	2108      	movs	r1, #8
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <yellow_red+0x44>)
 80015b6:	f000 fb3a 	bl	8001c2e <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2110      	movs	r1, #16
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <yellow_red+0x44>)
 80015c0:	f000 fb35 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	2120      	movs	r1, #32
 80015c8:	4804      	ldr	r0, [pc, #16]	; (80015dc <yellow_red+0x44>)
 80015ca:	f000 fb30 	bl	8001c2e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	2140      	movs	r1, #64	; 0x40
 80015d2:	4802      	ldr	r0, [pc, #8]	; (80015dc <yellow_red+0x44>)
 80015d4:	f000 fb2b 	bl	8001c2e <HAL_GPIO_WritePin>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010800 	.word	0x40010800

080015e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015e0:	f7ff ff68 	bl	80014b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015e4:	480b      	ldr	r0, [pc, #44]	; (8001614 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015e6:	490c      	ldr	r1, [pc, #48]	; (8001618 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ec:	e002      	b.n	80015f4 <LoopCopyDataInit>

080015ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015f2:	3304      	adds	r3, #4

080015f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015f8:	d3f9      	bcc.n	80015ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015fc:	4c09      	ldr	r4, [pc, #36]	; (8001624 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001600:	e001      	b.n	8001606 <LoopFillZerobss>

08001602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001604:	3204      	adds	r2, #4

08001606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001608:	d3fb      	bcc.n	8001602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800160a:	f001 faff 	bl	8002c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800160e:	f7ff fbef 	bl	8000df0 <main>
  bx lr
 8001612:	4770      	bx	lr
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001618:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800161c:	08002e50 	.word	0x08002e50
  ldr r2, =_sbss
 8001620:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001624:	20000170 	.word	0x20000170

08001628 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001628:	e7fe      	b.n	8001628 <ADC1_2_IRQHandler>
	...

0800162c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <HAL_Init+0x28>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a07      	ldr	r2, [pc, #28]	; (8001654 <HAL_Init+0x28>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800163c:	2003      	movs	r0, #3
 800163e:	f000 f923 	bl	8001888 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001642:	200f      	movs	r0, #15
 8001644:	f000 f808 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001648:	f7ff fe76 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800164c:	2300      	movs	r3, #0
}
 800164e:	4618      	mov	r0, r3
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40022000 	.word	0x40022000

08001658 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001660:	4b12      	ldr	r3, [pc, #72]	; (80016ac <HAL_InitTick+0x54>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <HAL_InitTick+0x58>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	4619      	mov	r1, r3
 800166a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001672:	fbb2 f3f3 	udiv	r3, r2, r3
 8001676:	4618      	mov	r0, r3
 8001678:	f000 f93b 	bl	80018f2 <HAL_SYSTICK_Config>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e00e      	b.n	80016a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b0f      	cmp	r3, #15
 800168a:	d80a      	bhi.n	80016a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800168c:	2200      	movs	r2, #0
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	f04f 30ff 	mov.w	r0, #4294967295
 8001694:	f000 f903 	bl	800189e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001698:	4a06      	ldr	r2, [pc, #24]	; (80016b4 <HAL_InitTick+0x5c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	e000      	b.n	80016a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3708      	adds	r7, #8
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	20000018 	.word	0x20000018
 80016b0:	20000020 	.word	0x20000020
 80016b4:	2000001c 	.word	0x2000001c

080016b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <HAL_IncTick+0x1c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	4b05      	ldr	r3, [pc, #20]	; (80016d8 <HAL_IncTick+0x20>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4413      	add	r3, r2
 80016c8:	4a03      	ldr	r2, [pc, #12]	; (80016d8 <HAL_IncTick+0x20>)
 80016ca:	6013      	str	r3, [r2, #0]
}
 80016cc:	bf00      	nop
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	20000020 	.word	0x20000020
 80016d8:	2000015c 	.word	0x2000015c

080016dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return uwTick;
 80016e0:	4b02      	ldr	r3, [pc, #8]	; (80016ec <HAL_GetTick+0x10>)
 80016e2:	681b      	ldr	r3, [r3, #0]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	2000015c 	.word	0x2000015c

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	bc80      	pop	{r7}
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4906      	ldr	r1, [pc, #24]	; (8001788 <__NVIC_EnableIRQ+0x34>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr
 8001788:	e000e100 	.word	0xe000e100

0800178c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	6039      	str	r1, [r7, #0]
 8001796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179c:	2b00      	cmp	r3, #0
 800179e:	db0a      	blt.n	80017b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	490c      	ldr	r1, [pc, #48]	; (80017d8 <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	0112      	lsls	r2, r2, #4
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	440b      	add	r3, r1
 80017b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b4:	e00a      	b.n	80017cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4908      	ldr	r1, [pc, #32]	; (80017dc <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	0112      	lsls	r2, r2, #4
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	761a      	strb	r2, [r3, #24]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	e000e100 	.word	0xe000e100
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b089      	sub	sp, #36	; 0x24
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f1c3 0307 	rsb	r3, r3, #7
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	bf28      	it	cs
 80017fe:	2304      	movcs	r3, #4
 8001800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3304      	adds	r3, #4
 8001806:	2b06      	cmp	r3, #6
 8001808:	d902      	bls.n	8001810 <NVIC_EncodePriority+0x30>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3b03      	subs	r3, #3
 800180e:	e000      	b.n	8001812 <NVIC_EncodePriority+0x32>
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	401a      	ands	r2, r3
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001828:	f04f 31ff 	mov.w	r1, #4294967295
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	43d9      	mvns	r1, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	4313      	orrs	r3, r2
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3b01      	subs	r3, #1
 8001850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001854:	d301      	bcc.n	800185a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001856:	2301      	movs	r3, #1
 8001858:	e00f      	b.n	800187a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <SysTick_Config+0x40>)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	3b01      	subs	r3, #1
 8001860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001862:	210f      	movs	r1, #15
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f7ff ff90 	bl	800178c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <SysTick_Config+0x40>)
 800186e:	2200      	movs	r2, #0
 8001870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <SysTick_Config+0x40>)
 8001874:	2207      	movs	r2, #7
 8001876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ff2d 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800189e:	b580      	push	{r7, lr}
 80018a0:	b086      	sub	sp, #24
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b0:	f7ff ff42 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	68b9      	ldr	r1, [r7, #8]
 80018ba:	6978      	ldr	r0, [r7, #20]
 80018bc:	f7ff ff90 	bl	80017e0 <NVIC_EncodePriority>
 80018c0:	4602      	mov	r2, r0
 80018c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff5f 	bl	800178c <__NVIC_SetPriority>
}
 80018ce:	bf00      	nop
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b082      	sub	sp, #8
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff35 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7ff ffa2 	bl	8001844 <SysTick_Config>
 8001900:	4603      	mov	r3, r0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b08b      	sub	sp, #44	; 0x2c
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001916:	2300      	movs	r3, #0
 8001918:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800191a:	2300      	movs	r3, #0
 800191c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800191e:	e148      	b.n	8001bb2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001920:	2201      	movs	r2, #1
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	4013      	ands	r3, r2
 8001932:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8137 	bne.w	8001bac <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	4aa3      	ldr	r2, [pc, #652]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d05e      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001948:	4aa1      	ldr	r2, [pc, #644]	; (8001bd0 <HAL_GPIO_Init+0x2c4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d875      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800194e:	4aa1      	ldr	r2, [pc, #644]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d058      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001954:	4a9f      	ldr	r2, [pc, #636]	; (8001bd4 <HAL_GPIO_Init+0x2c8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d86f      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800195a:	4a9f      	ldr	r2, [pc, #636]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d052      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001960:	4a9d      	ldr	r2, [pc, #628]	; (8001bd8 <HAL_GPIO_Init+0x2cc>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d869      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001966:	4a9d      	ldr	r2, [pc, #628]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d04c      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 800196c:	4a9b      	ldr	r2, [pc, #620]	; (8001bdc <HAL_GPIO_Init+0x2d0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d863      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001972:	4a9b      	ldr	r2, [pc, #620]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d046      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
 8001978:	4a99      	ldr	r2, [pc, #612]	; (8001be0 <HAL_GPIO_Init+0x2d4>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d85d      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 800197e:	2b12      	cmp	r3, #18
 8001980:	d82a      	bhi.n	80019d8 <HAL_GPIO_Init+0xcc>
 8001982:	2b12      	cmp	r3, #18
 8001984:	d859      	bhi.n	8001a3a <HAL_GPIO_Init+0x12e>
 8001986:	a201      	add	r2, pc, #4	; (adr r2, 800198c <HAL_GPIO_Init+0x80>)
 8001988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800198c:	08001a07 	.word	0x08001a07
 8001990:	080019e1 	.word	0x080019e1
 8001994:	080019f3 	.word	0x080019f3
 8001998:	08001a35 	.word	0x08001a35
 800199c:	08001a3b 	.word	0x08001a3b
 80019a0:	08001a3b 	.word	0x08001a3b
 80019a4:	08001a3b 	.word	0x08001a3b
 80019a8:	08001a3b 	.word	0x08001a3b
 80019ac:	08001a3b 	.word	0x08001a3b
 80019b0:	08001a3b 	.word	0x08001a3b
 80019b4:	08001a3b 	.word	0x08001a3b
 80019b8:	08001a3b 	.word	0x08001a3b
 80019bc:	08001a3b 	.word	0x08001a3b
 80019c0:	08001a3b 	.word	0x08001a3b
 80019c4:	08001a3b 	.word	0x08001a3b
 80019c8:	08001a3b 	.word	0x08001a3b
 80019cc:	08001a3b 	.word	0x08001a3b
 80019d0:	080019e9 	.word	0x080019e9
 80019d4:	080019fd 	.word	0x080019fd
 80019d8:	4a82      	ldr	r2, [pc, #520]	; (8001be4 <HAL_GPIO_Init+0x2d8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019de:	e02c      	b.n	8001a3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	623b      	str	r3, [r7, #32]
          break;
 80019e6:	e029      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	3304      	adds	r3, #4
 80019ee:	623b      	str	r3, [r7, #32]
          break;
 80019f0:	e024      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	68db      	ldr	r3, [r3, #12]
 80019f6:	3308      	adds	r3, #8
 80019f8:	623b      	str	r3, [r7, #32]
          break;
 80019fa:	e01f      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	330c      	adds	r3, #12
 8001a02:	623b      	str	r3, [r7, #32]
          break;
 8001a04:	e01a      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	623b      	str	r3, [r7, #32]
          break;
 8001a12:	e013      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d105      	bne.n	8001a28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	611a      	str	r2, [r3, #16]
          break;
 8001a26:	e009      	b.n	8001a3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	615a      	str	r2, [r3, #20]
          break;
 8001a32:	e003      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
          break;
 8001a38:	e000      	b.n	8001a3c <HAL_GPIO_Init+0x130>
          break;
 8001a3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	2bff      	cmp	r3, #255	; 0xff
 8001a40:	d801      	bhi.n	8001a46 <HAL_GPIO_Init+0x13a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	e001      	b.n	8001a4a <HAL_GPIO_Init+0x13e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3304      	adds	r3, #4
 8001a4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2bff      	cmp	r3, #255	; 0xff
 8001a50:	d802      	bhi.n	8001a58 <HAL_GPIO_Init+0x14c>
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	e002      	b.n	8001a5e <HAL_GPIO_Init+0x152>
 8001a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5a:	3b08      	subs	r3, #8
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	210f      	movs	r1, #15
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	6a39      	ldr	r1, [r7, #32]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	fa01 f303 	lsl.w	r3, r1, r3
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8090 	beq.w	8001bac <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8c:	4b56      	ldr	r3, [pc, #344]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a55      	ldr	r2, [pc, #340]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b53      	ldr	r3, [pc, #332]	; (8001be8 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aa4:	4a51      	ldr	r2, [pc, #324]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	089b      	lsrs	r3, r3, #2
 8001aaa:	3302      	adds	r3, #2
 8001aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f003 0303 	and.w	r3, r3, #3
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	220f      	movs	r2, #15
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a49      	ldr	r2, [pc, #292]	; (8001bf0 <HAL_GPIO_Init+0x2e4>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d00d      	beq.n	8001aec <HAL_GPIO_Init+0x1e0>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a48      	ldr	r2, [pc, #288]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d007      	beq.n	8001ae8 <HAL_GPIO_Init+0x1dc>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a47      	ldr	r2, [pc, #284]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_GPIO_Init+0x1d8>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1e2>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	493b      	ldr	r1, [pc, #236]	; (8001bec <HAL_GPIO_Init+0x2e0>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4937      	ldr	r1, [pc, #220]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	608b      	str	r3, [r1, #8]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b26:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b40:	4b2e      	ldr	r3, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b42:	68da      	ldr	r2, [r3, #12]
 8001b44:	492d      	ldr	r1, [pc, #180]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60cb      	str	r3, [r1, #12]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b68:	4b24      	ldr	r3, [pc, #144]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	4923      	ldr	r1, [pc, #140]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b76:	4b21      	ldr	r3, [pc, #132]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	491f      	ldr	r1, [pc, #124]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d006      	beq.n	8001b9e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	4919      	ldr	r1, [pc, #100]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	600b      	str	r3, [r1, #0]
 8001b9c:	e006      	b.n	8001bac <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	4915      	ldr	r1, [pc, #84]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bae:	3301      	adds	r3, #1
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f47f aeaf 	bne.w	8001920 <HAL_GPIO_Init+0x14>
  }
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	372c      	adds	r7, #44	; 0x2c
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	10320000 	.word	0x10320000
 8001bd4:	10310000 	.word	0x10310000
 8001bd8:	10220000 	.word	0x10220000
 8001bdc:	10210000 	.word	0x10210000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10110000 	.word	0x10110000
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	40010800 	.word	0x40010800
 8001bf4:	40010c00 	.word	0x40010c00
 8001bf8:	40011000 	.word	0x40011000
 8001bfc:	40010400 	.word	0x40010400

08001c00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	4013      	ands	r3, r2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d002      	beq.n	8001c1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e001      	b.n	8001c22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	460b      	mov	r3, r1
 8001c38:	807b      	strh	r3, [r7, #2]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c3e:	787b      	ldrb	r3, [r7, #1]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d003      	beq.n	8001c4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c44:	887a      	ldrh	r2, [r7, #2]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c4a:	e003      	b.n	8001c54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c4c:	887b      	ldrh	r3, [r7, #2]
 8001c4e:	041a      	lsls	r2, r3, #16
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	611a      	str	r2, [r3, #16]
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr

08001c5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	460b      	mov	r3, r1
 8001c68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c70:	887a      	ldrh	r2, [r7, #2]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	4013      	ands	r3, r2
 8001c76:	041a      	lsls	r2, r3, #16
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	43d9      	mvns	r1, r3
 8001c7c:	887b      	ldrh	r3, [r7, #2]
 8001c7e:	400b      	ands	r3, r1
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	611a      	str	r2, [r3, #16]
}
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d101      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e26c      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8087 	beq.w	8001dbe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cb0:	4b92      	ldr	r3, [pc, #584]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 030c 	and.w	r3, r3, #12
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d00c      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cbc:	4b8f      	ldr	r3, [pc, #572]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f003 030c 	and.w	r3, r3, #12
 8001cc4:	2b08      	cmp	r3, #8
 8001cc6:	d112      	bne.n	8001cee <HAL_RCC_OscConfig+0x5e>
 8001cc8:	4b8c      	ldr	r3, [pc, #560]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d10b      	bne.n	8001cee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd6:	4b89      	ldr	r3, [pc, #548]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d06c      	beq.n	8001dbc <HAL_RCC_OscConfig+0x12c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d168      	bne.n	8001dbc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e246      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf6:	d106      	bne.n	8001d06 <HAL_RCC_OscConfig+0x76>
 8001cf8:	4b80      	ldr	r3, [pc, #512]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a7f      	ldr	r2, [pc, #508]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001cfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d02:	6013      	str	r3, [r2, #0]
 8001d04:	e02e      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d10c      	bne.n	8001d28 <HAL_RCC_OscConfig+0x98>
 8001d0e:	4b7b      	ldr	r3, [pc, #492]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a7a      	ldr	r2, [pc, #488]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	4b78      	ldr	r3, [pc, #480]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a77      	ldr	r2, [pc, #476]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e01d      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d30:	d10c      	bne.n	8001d4c <HAL_RCC_OscConfig+0xbc>
 8001d32:	4b72      	ldr	r3, [pc, #456]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a71      	ldr	r2, [pc, #452]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b6f      	ldr	r3, [pc, #444]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a6e      	ldr	r2, [pc, #440]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e00b      	b.n	8001d64 <HAL_RCC_OscConfig+0xd4>
 8001d4c:	4b6b      	ldr	r3, [pc, #428]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a6a      	ldr	r2, [pc, #424]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d56:	6013      	str	r3, [r2, #0]
 8001d58:	4b68      	ldr	r3, [pc, #416]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a67      	ldr	r2, [pc, #412]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d62:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fcb6 	bl	80016dc <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d74:	f7ff fcb2 	bl	80016dc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b64      	cmp	r3, #100	; 0x64
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e1fa      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	4b5d      	ldr	r3, [pc, #372]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0xe4>
 8001d92:	e014      	b.n	8001dbe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7ff fca2 	bl	80016dc <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fc9e 	bl	80016dc <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	; 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1e6      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dae:	4b53      	ldr	r3, [pc, #332]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1f0      	bne.n	8001d9c <HAL_RCC_OscConfig+0x10c>
 8001dba:	e000      	b.n	8001dbe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0302 	and.w	r3, r3, #2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d063      	beq.n	8001e92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dca:	4b4c      	ldr	r3, [pc, #304]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00b      	beq.n	8001dee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001dd6:	4b49      	ldr	r3, [pc, #292]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 030c 	and.w	r3, r3, #12
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d11c      	bne.n	8001e1c <HAL_RCC_OscConfig+0x18c>
 8001de2:	4b46      	ldr	r3, [pc, #280]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d116      	bne.n	8001e1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	4b43      	ldr	r3, [pc, #268]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d005      	beq.n	8001e06 <HAL_RCC_OscConfig+0x176>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d001      	beq.n	8001e06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e1ba      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e06:	4b3d      	ldr	r3, [pc, #244]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	4939      	ldr	r1, [pc, #228]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e1a:	e03a      	b.n	8001e92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d020      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x270>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e2a:	f7ff fc57 	bl	80016dc <HAL_GetTick>
 8001e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff fc53 	bl	80016dc <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e19b      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f0      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4927      	ldr	r1, [pc, #156]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	600b      	str	r3, [r1, #0]
 8001e64:	e015      	b.n	8001e92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x270>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6c:	f7ff fc36 	bl	80016dc <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e74:	f7ff fc32 	bl	80016dc <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e17a      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e86:	4b1d      	ldr	r3, [pc, #116]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d03a      	beq.n	8001f14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	699b      	ldr	r3, [r3, #24]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d019      	beq.n	8001eda <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_RCC_OscConfig+0x274>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eac:	f7ff fc16 	bl	80016dc <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb4:	f7ff fc12 	bl	80016dc <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e15a      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec6:	4b0d      	ldr	r3, [pc, #52]	; (8001efc <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f000 fa9a 	bl	800240c <RCC_Delay>
 8001ed8:	e01c      	b.n	8001f14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_RCC_OscConfig+0x274>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee0:	f7ff fbfc 	bl	80016dc <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ee6:	e00f      	b.n	8001f08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fbf8 	bl	80016dc <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d908      	bls.n	8001f08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e140      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
 8001efa:	bf00      	nop
 8001efc:	40021000 	.word	0x40021000
 8001f00:	42420000 	.word	0x42420000
 8001f04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f08:	4b9e      	ldr	r3, [pc, #632]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1e9      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a6 	beq.w	800206e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f22:	2300      	movs	r3, #0
 8001f24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f26:	4b97      	ldr	r3, [pc, #604]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10d      	bne.n	8001f4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b94      	ldr	r3, [pc, #592]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	4a93      	ldr	r2, [pc, #588]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	61d3      	str	r3, [r2, #28]
 8001f3e:	4b91      	ldr	r3, [pc, #580]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	69db      	ldr	r3, [r3, #28]
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f4e:	4b8e      	ldr	r3, [pc, #568]	; (8002188 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d118      	bne.n	8001f8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f5a:	4b8b      	ldr	r3, [pc, #556]	; (8002188 <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a8a      	ldr	r2, [pc, #552]	; (8002188 <HAL_RCC_OscConfig+0x4f8>)
 8001f60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f66:	f7ff fbb9 	bl	80016dc <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f6c:	e008      	b.n	8001f80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f6e:	f7ff fbb5 	bl	80016dc <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	2b64      	cmp	r3, #100	; 0x64
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e0fd      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f80:	4b81      	ldr	r3, [pc, #516]	; (8002188 <HAL_RCC_OscConfig+0x4f8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d0f0      	beq.n	8001f6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d106      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x312>
 8001f94:	4b7b      	ldr	r3, [pc, #492]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f96:	6a1b      	ldr	r3, [r3, #32]
 8001f98:	4a7a      	ldr	r2, [pc, #488]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6213      	str	r3, [r2, #32]
 8001fa0:	e02d      	b.n	8001ffe <HAL_RCC_OscConfig+0x36e>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10c      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x334>
 8001faa:	4b76      	ldr	r3, [pc, #472]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a75      	ldr	r2, [pc, #468]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6213      	str	r3, [r2, #32]
 8001fb6:	4b73      	ldr	r3, [pc, #460]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fb8:	6a1b      	ldr	r3, [r3, #32]
 8001fba:	4a72      	ldr	r2, [pc, #456]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6213      	str	r3, [r2, #32]
 8001fc2:	e01c      	b.n	8001ffe <HAL_RCC_OscConfig+0x36e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b05      	cmp	r3, #5
 8001fca:	d10c      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x356>
 8001fcc:	4b6d      	ldr	r3, [pc, #436]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	4a6c      	ldr	r2, [pc, #432]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	6213      	str	r3, [r2, #32]
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	4a69      	ldr	r2, [pc, #420]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6213      	str	r3, [r2, #32]
 8001fe4:	e00b      	b.n	8001ffe <HAL_RCC_OscConfig+0x36e>
 8001fe6:	4b67      	ldr	r3, [pc, #412]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	4a66      	ldr	r2, [pc, #408]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	f023 0301 	bic.w	r3, r3, #1
 8001ff0:	6213      	str	r3, [r2, #32]
 8001ff2:	4b64      	ldr	r3, [pc, #400]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4a63      	ldr	r2, [pc, #396]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	f023 0304 	bic.w	r3, r3, #4
 8001ffc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d015      	beq.n	8002032 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002006:	f7ff fb69 	bl	80016dc <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800200c:	e00a      	b.n	8002024 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200e:	f7ff fb65 	bl	80016dc <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f241 3288 	movw	r2, #5000	; 0x1388
 800201c:	4293      	cmp	r3, r2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e0ab      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002024:	4b57      	ldr	r3, [pc, #348]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b00      	cmp	r3, #0
 800202e:	d0ee      	beq.n	800200e <HAL_RCC_OscConfig+0x37e>
 8002030:	e014      	b.n	800205c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002032:	f7ff fb53 	bl	80016dc <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002038:	e00a      	b.n	8002050 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800203a:	f7ff fb4f 	bl	80016dc <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f241 3288 	movw	r2, #5000	; 0x1388
 8002048:	4293      	cmp	r3, r2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e095      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	6a1b      	ldr	r3, [r3, #32]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1ee      	bne.n	800203a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d105      	bne.n	800206e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b48      	ldr	r3, [pc, #288]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	4a47      	ldr	r2, [pc, #284]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800206c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 8081 	beq.w	800217a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d061      	beq.n	8002148 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d146      	bne.n	800211a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800208c:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_OscConfig+0x4fc>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7ff fb23 	bl	80016dc <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800209a:	f7ff fb1f 	bl	80016dc <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e067      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ac:	4b35      	ldr	r3, [pc, #212]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d108      	bne.n	80020d4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020c2:	4b30      	ldr	r3, [pc, #192]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	492d      	ldr	r1, [pc, #180]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d4:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a19      	ldr	r1, [r3, #32]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	430b      	orrs	r3, r1
 80020e6:	4927      	ldr	r1, [pc, #156]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ec:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_RCC_OscConfig+0x4fc>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f2:	f7ff faf3 	bl	80016dc <HAL_GetTick>
 80020f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f8:	e008      	b.n	800210c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020fa:	f7ff faef 	bl	80016dc <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	2b02      	cmp	r3, #2
 8002106:	d901      	bls.n	800210c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e037      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800210c:	4b1d      	ldr	r3, [pc, #116]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d0f0      	beq.n	80020fa <HAL_RCC_OscConfig+0x46a>
 8002118:	e02f      	b.n	800217a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <HAL_RCC_OscConfig+0x4fc>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fadc 	bl	80016dc <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002128:	f7ff fad8 	bl	80016dc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e020      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x498>
 8002146:	e018      	b.n	800217a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	69db      	ldr	r3, [r3, #28]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e013      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_OscConfig+0x4f4>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	429a      	cmp	r2, r3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40007000 	.word	0x40007000
 800218c:	42420060 	.word	0x42420060

08002190 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0d0      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d910      	bls.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b2:	4b67      	ldr	r3, [pc, #412]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f023 0207 	bic.w	r2, r3, #7
 80021ba:	4965      	ldr	r1, [pc, #404]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	4313      	orrs	r3, r2
 80021c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d001      	beq.n	80021d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e0b8      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d020      	beq.n	8002222 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021ec:	4b59      	ldr	r3, [pc, #356]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4a58      	ldr	r2, [pc, #352]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80021f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80021f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0308 	and.w	r3, r3, #8
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002204:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800220a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800220e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002210:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	494d      	ldr	r1, [pc, #308]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d040      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002236:	4b47      	ldr	r3, [pc, #284]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d115      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e07f      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d107      	bne.n	800225e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d109      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e073      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225e:	4b3d      	ldr	r3, [pc, #244]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e06b      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800226e:	4b39      	ldr	r3, [pc, #228]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 0203 	bic.w	r2, r3, #3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4936      	ldr	r1, [pc, #216]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002280:	f7ff fa2c 	bl	80016dc <HAL_GetTick>
 8002284:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	e00a      	b.n	800229e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002288:	f7ff fa28 	bl	80016dc <HAL_GetTick>
 800228c:	4602      	mov	r2, r0
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	f241 3288 	movw	r2, #5000	; 0x1388
 8002296:	4293      	cmp	r3, r2
 8002298:	d901      	bls.n	800229e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e053      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 020c 	and.w	r2, r3, #12
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d1eb      	bne.n	8002288 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b0:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d210      	bcs.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 0207 	bic.w	r2, r3, #7
 80022c6:	4922      	ldr	r1, [pc, #136]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0307 	and.w	r3, r3, #7
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e032      	b.n	8002346 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0304 	and.w	r3, r3, #4
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d008      	beq.n	80022fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	4916      	ldr	r1, [pc, #88]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0308 	and.w	r3, r3, #8
 8002306:	2b00      	cmp	r3, #0
 8002308:	d009      	beq.n	800231e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	490e      	ldr	r1, [pc, #56]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 800231a:	4313      	orrs	r3, r2
 800231c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231e:	f000 f821 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 8002322:	4602      	mov	r2, r0
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <HAL_RCC_ClockConfig+0x1c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	091b      	lsrs	r3, r3, #4
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	490a      	ldr	r1, [pc, #40]	; (8002358 <HAL_RCC_ClockConfig+0x1c8>)
 8002330:	5ccb      	ldrb	r3, [r1, r3]
 8002332:	fa22 f303 	lsr.w	r3, r2, r3
 8002336:	4a09      	ldr	r2, [pc, #36]	; (800235c <HAL_RCC_ClockConfig+0x1cc>)
 8002338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800233a:	4b09      	ldr	r3, [pc, #36]	; (8002360 <HAL_RCC_ClockConfig+0x1d0>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f98a 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40022000 	.word	0x40022000
 8002354:	40021000 	.word	0x40021000
 8002358:	08002e24 	.word	0x08002e24
 800235c:	20000018 	.word	0x20000018
 8002360:	2000001c 	.word	0x2000001c

08002364 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	2300      	movs	r3, #0
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	2300      	movs	r3, #0
 8002378:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800237e:	4b1e      	ldr	r3, [pc, #120]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f003 030c 	and.w	r3, r3, #12
 800238a:	2b04      	cmp	r3, #4
 800238c:	d002      	beq.n	8002394 <HAL_RCC_GetSysClockFreq+0x30>
 800238e:	2b08      	cmp	r3, #8
 8002390:	d003      	beq.n	800239a <HAL_RCC_GetSysClockFreq+0x36>
 8002392:	e027      	b.n	80023e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002394:	4b19      	ldr	r3, [pc, #100]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 8002396:	613b      	str	r3, [r7, #16]
      break;
 8002398:	e027      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	0c9b      	lsrs	r3, r3, #18
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	4a17      	ldr	r2, [pc, #92]	; (8002400 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023a4:	5cd3      	ldrb	r3, [r2, r3]
 80023a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d010      	beq.n	80023d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	0c5b      	lsrs	r3, r3, #17
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	4a11      	ldr	r2, [pc, #68]	; (8002404 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023be:	5cd3      	ldrb	r3, [r2, r3]
 80023c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a0d      	ldr	r2, [pc, #52]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023c6:	fb02 f203 	mul.w	r2, r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d0:	617b      	str	r3, [r7, #20]
 80023d2:	e004      	b.n	80023de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a0c      	ldr	r2, [pc, #48]	; (8002408 <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	613b      	str	r3, [r7, #16]
      break;
 80023e2:	e002      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetSysClockFreq+0x98>)
 80023e6:	613b      	str	r3, [r7, #16]
      break;
 80023e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023ea:	693b      	ldr	r3, [r7, #16]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	40021000 	.word	0x40021000
 80023fc:	007a1200 	.word	0x007a1200
 8002400:	08002e34 	.word	0x08002e34
 8002404:	08002e44 	.word	0x08002e44
 8002408:	003d0900 	.word	0x003d0900

0800240c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <RCC_Delay+0x34>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <RCC_Delay+0x38>)
 800241a:	fba2 2303 	umull	r2, r3, r2, r3
 800241e:	0a5b      	lsrs	r3, r3, #9
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	fb02 f303 	mul.w	r3, r2, r3
 8002426:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002428:	bf00      	nop
  }
  while (Delay --);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	60fa      	str	r2, [r7, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d1f9      	bne.n	8002428 <RCC_Delay+0x1c>
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bc80      	pop	{r7}
 800243e:	4770      	bx	lr
 8002440:	20000018 	.word	0x20000018
 8002444:	10624dd3 	.word	0x10624dd3

08002448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e041      	b.n	80024de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7fe ff94 	bl	800139c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2202      	movs	r2, #2
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3304      	adds	r3, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4610      	mov	r0, r2
 8002488:	f000 fa56 	bl	8002938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2201      	movs	r2, #1
 80024a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2201      	movs	r2, #1
 80024b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
	...

080024e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d001      	beq.n	8002500 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e035      	b.n	800256c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a16      	ldr	r2, [pc, #88]	; (8002578 <HAL_TIM_Base_Start_IT+0x90>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d009      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d004      	beq.n	8002536 <HAL_TIM_Base_Start_IT+0x4e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a12      	ldr	r2, [pc, #72]	; (800257c <HAL_TIM_Base_Start_IT+0x94>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d111      	bne.n	800255a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b06      	cmp	r3, #6
 8002546:	d010      	beq.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002558:	e007      	b.n	800256a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40000400 	.word	0x40000400

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d020      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d01b      	beq.n	80025e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f06f 0202 	mvn.w	r2, #2
 80025b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f998 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 80025d0:	e005      	b.n	80025de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f98b 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f000 f99a 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d020      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d01b      	beq.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f972 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f965 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f974 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	d020      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d01b      	beq.n	800267c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f06f 0208 	mvn.w	r2, #8
 800264c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2204      	movs	r2, #4
 8002652:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f94c 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 8002668:	e005      	b.n	8002676 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f93f 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f94e 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	f003 0310 	and.w	r3, r3, #16
 8002682:	2b00      	cmp	r3, #0
 8002684:	d020      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	f003 0310 	and.w	r3, r3, #16
 800268c:	2b00      	cmp	r3, #0
 800268e:	d01b      	beq.n	80026c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0210 	mvn.w	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2208      	movs	r2, #8
 800269e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f926 	bl	8002900 <HAL_TIM_IC_CaptureCallback>
 80026b4:	e005      	b.n	80026c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f919 	bl	80028ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f928 	bl	8002912 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f06f 0201 	mvn.w	r2, #1
 80026e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f7fe fcba 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa6f 	bl	8002bee <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8f8 	bl	8002924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00c      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f003 0320 	and.w	r3, r3, #32
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0220 	mvn.w	r2, #32
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa42 	bl	8002bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002758:	bf00      	nop
 800275a:	3710      	adds	r7, #16
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_TIM_ConfigClockSource+0x1c>
 8002778:	2302      	movs	r3, #2
 800277a:	e0b4      	b.n	80028e6 <HAL_TIM_ConfigClockSource+0x186>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800279a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027b4:	d03e      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xd4>
 80027b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ba:	f200 8087 	bhi.w	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027c2:	f000 8086 	beq.w	80028d2 <HAL_TIM_ConfigClockSource+0x172>
 80027c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ca:	d87f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d01a      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0xa6>
 80027d0:	2b70      	cmp	r3, #112	; 0x70
 80027d2:	d87b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027d4:	2b60      	cmp	r3, #96	; 0x60
 80027d6:	d050      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x11a>
 80027d8:	2b60      	cmp	r3, #96	; 0x60
 80027da:	d877      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027dc:	2b50      	cmp	r3, #80	; 0x50
 80027de:	d03c      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xfa>
 80027e0:	2b50      	cmp	r3, #80	; 0x50
 80027e2:	d873      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d058      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x13a>
 80027e8:	2b40      	cmp	r3, #64	; 0x40
 80027ea:	d86f      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027ec:	2b30      	cmp	r3, #48	; 0x30
 80027ee:	d064      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f0:	2b30      	cmp	r3, #48	; 0x30
 80027f2:	d86b      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d060      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 80027f8:	2b20      	cmp	r3, #32
 80027fa:	d867      	bhi.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d05c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002800:	2b10      	cmp	r3, #16
 8002802:	d05a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x15a>
 8002804:	e062      	b.n	80028cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f000 f96a 	bl	8002aee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	609a      	str	r2, [r3, #8]
      break;
 8002832:	e04f      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f000 f953 	bl	8002aee <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002856:	609a      	str	r2, [r3, #8]
      break;
 8002858:	e03c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8ca 	bl	8002a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2150      	movs	r1, #80	; 0x50
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f921 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002878:	e02c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8e8 	bl	8002a5c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2160      	movs	r1, #96	; 0x60
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f911 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 8002898:	e01c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f8aa 	bl	8002a00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f901 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80028b8:	e00c      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 f8f8 	bl	8002aba <TIM_ITRx_SetConfig>
      break;
 80028ca:	e003      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	73fb      	strb	r3, [r7, #15]
      break;
 80028d0:	e000      	b.n	80028d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b083      	sub	sp, #12
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr

08002912 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
	...

08002938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4a2b      	ldr	r2, [pc, #172]	; (80029f8 <TIM_Base_SetConfig+0xc0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d007      	beq.n	8002960 <TIM_Base_SetConfig+0x28>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002956:	d003      	beq.n	8002960 <TIM_Base_SetConfig+0x28>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a28      	ldr	r2, [pc, #160]	; (80029fc <TIM_Base_SetConfig+0xc4>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d108      	bne.n	8002972 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a20      	ldr	r2, [pc, #128]	; (80029f8 <TIM_Base_SetConfig+0xc0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d007      	beq.n	800298a <TIM_Base_SetConfig+0x52>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002980:	d003      	beq.n	800298a <TIM_Base_SetConfig+0x52>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <TIM_Base_SetConfig+0xc4>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d108      	bne.n	800299c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a0d      	ldr	r2, [pc, #52]	; (80029f8 <TIM_Base_SetConfig+0xc0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d103      	bne.n	80029d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d005      	beq.n	80029ee <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f023 0201 	bic.w	r2, r3, #1
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	611a      	str	r2, [r3, #16]
  }
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	40012c00 	.word	0x40012c00
 80029fc:	40000400 	.word	0x40000400

08002a00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b087      	sub	sp, #28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	f023 0201 	bic.w	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 030a 	bic.w	r3, r3, #10
 8002a3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	621a      	str	r2, [r3, #32]
}
 8002a52:	bf00      	nop
 8002a54:	371c      	adds	r7, #28
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bc80      	pop	{r7}
 8002a5a:	4770      	bx	lr

08002a5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f023 0210 	bic.w	r2, r3, #16
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	699b      	ldr	r3, [r3, #24]
 8002a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	031b      	lsls	r3, r3, #12
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	621a      	str	r2, [r3, #32]
}
 8002ab0:	bf00      	nop
 8002ab2:	371c      	adds	r7, #28
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b085      	sub	sp, #20
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ad2:	683a      	ldr	r2, [r7, #0]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f043 0307 	orr.w	r3, r3, #7
 8002adc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
}
 8002ae4:	bf00      	nop
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bc80      	pop	{r7}
 8002aec:	4770      	bx	lr

08002aee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b087      	sub	sp, #28
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	60f8      	str	r0, [r7, #12]
 8002af6:	60b9      	str	r1, [r7, #8]
 8002af8:	607a      	str	r2, [r7, #4]
 8002afa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	021a      	lsls	r2, r3, #8
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	431a      	orrs	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	609a      	str	r2, [r3, #8]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d101      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b40:	2302      	movs	r3, #2
 8002b42:	e041      	b.n	8002bc8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d009      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b90:	d004      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a10      	ldr	r2, [pc, #64]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10c      	bne.n	8002bb6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ba2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bc80      	pop	{r7}
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40012c00 	.word	0x40012c00
 8002bd8:	40000400 	.word	0x40000400

08002bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bc80      	pop	{r7}
 8002bec:	4770      	bx	lr

08002bee <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <__errno>:
 8002c00:	4b01      	ldr	r3, [pc, #4]	; (8002c08 <__errno+0x8>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	20000024 	.word	0x20000024

08002c0c <__libc_init_array>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	2600      	movs	r6, #0
 8002c10:	4d0c      	ldr	r5, [pc, #48]	; (8002c44 <__libc_init_array+0x38>)
 8002c12:	4c0d      	ldr	r4, [pc, #52]	; (8002c48 <__libc_init_array+0x3c>)
 8002c14:	1b64      	subs	r4, r4, r5
 8002c16:	10a4      	asrs	r4, r4, #2
 8002c18:	42a6      	cmp	r6, r4
 8002c1a:	d109      	bne.n	8002c30 <__libc_init_array+0x24>
 8002c1c:	f000 f8f6 	bl	8002e0c <_init>
 8002c20:	2600      	movs	r6, #0
 8002c22:	4d0a      	ldr	r5, [pc, #40]	; (8002c4c <__libc_init_array+0x40>)
 8002c24:	4c0a      	ldr	r4, [pc, #40]	; (8002c50 <__libc_init_array+0x44>)
 8002c26:	1b64      	subs	r4, r4, r5
 8002c28:	10a4      	asrs	r4, r4, #2
 8002c2a:	42a6      	cmp	r6, r4
 8002c2c:	d105      	bne.n	8002c3a <__libc_init_array+0x2e>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c34:	4798      	blx	r3
 8002c36:	3601      	adds	r6, #1
 8002c38:	e7ee      	b.n	8002c18 <__libc_init_array+0xc>
 8002c3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c3e:	4798      	blx	r3
 8002c40:	3601      	adds	r6, #1
 8002c42:	e7f2      	b.n	8002c2a <__libc_init_array+0x1e>
 8002c44:	08002e48 	.word	0x08002e48
 8002c48:	08002e48 	.word	0x08002e48
 8002c4c:	08002e48 	.word	0x08002e48
 8002c50:	08002e4c 	.word	0x08002e4c

08002c54 <malloc>:
 8002c54:	4b02      	ldr	r3, [pc, #8]	; (8002c60 <malloc+0xc>)
 8002c56:	4601      	mov	r1, r0
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	f000 b85f 	b.w	8002d1c <_malloc_r>
 8002c5e:	bf00      	nop
 8002c60:	20000024 	.word	0x20000024

08002c64 <free>:
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <free+0xc>)
 8002c66:	4601      	mov	r1, r0
 8002c68:	6818      	ldr	r0, [r3, #0]
 8002c6a:	f000 b80b 	b.w	8002c84 <_free_r>
 8002c6e:	bf00      	nop
 8002c70:	20000024 	.word	0x20000024

08002c74 <memset>:
 8002c74:	4603      	mov	r3, r0
 8002c76:	4402      	add	r2, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <_free_r>:
 8002c84:	b538      	push	{r3, r4, r5, lr}
 8002c86:	4605      	mov	r5, r0
 8002c88:	2900      	cmp	r1, #0
 8002c8a:	d043      	beq.n	8002d14 <_free_r+0x90>
 8002c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c90:	1f0c      	subs	r4, r1, #4
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	bfb8      	it	lt
 8002c96:	18e4      	addlt	r4, r4, r3
 8002c98:	f000 f8aa 	bl	8002df0 <__malloc_lock>
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <_free_r+0x94>)
 8002c9e:	6813      	ldr	r3, [r2, #0]
 8002ca0:	4610      	mov	r0, r2
 8002ca2:	b933      	cbnz	r3, 8002cb2 <_free_r+0x2e>
 8002ca4:	6063      	str	r3, [r4, #4]
 8002ca6:	6014      	str	r4, [r2, #0]
 8002ca8:	4628      	mov	r0, r5
 8002caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cae:	f000 b8a5 	b.w	8002dfc <__malloc_unlock>
 8002cb2:	42a3      	cmp	r3, r4
 8002cb4:	d90a      	bls.n	8002ccc <_free_r+0x48>
 8002cb6:	6821      	ldr	r1, [r4, #0]
 8002cb8:	1862      	adds	r2, r4, r1
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	bf01      	itttt	eq
 8002cbe:	681a      	ldreq	r2, [r3, #0]
 8002cc0:	685b      	ldreq	r3, [r3, #4]
 8002cc2:	1852      	addeq	r2, r2, r1
 8002cc4:	6022      	streq	r2, [r4, #0]
 8002cc6:	6063      	str	r3, [r4, #4]
 8002cc8:	6004      	str	r4, [r0, #0]
 8002cca:	e7ed      	b.n	8002ca8 <_free_r+0x24>
 8002ccc:	461a      	mov	r2, r3
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	b10b      	cbz	r3, 8002cd6 <_free_r+0x52>
 8002cd2:	42a3      	cmp	r3, r4
 8002cd4:	d9fa      	bls.n	8002ccc <_free_r+0x48>
 8002cd6:	6811      	ldr	r1, [r2, #0]
 8002cd8:	1850      	adds	r0, r2, r1
 8002cda:	42a0      	cmp	r0, r4
 8002cdc:	d10b      	bne.n	8002cf6 <_free_r+0x72>
 8002cde:	6820      	ldr	r0, [r4, #0]
 8002ce0:	4401      	add	r1, r0
 8002ce2:	1850      	adds	r0, r2, r1
 8002ce4:	4283      	cmp	r3, r0
 8002ce6:	6011      	str	r1, [r2, #0]
 8002ce8:	d1de      	bne.n	8002ca8 <_free_r+0x24>
 8002cea:	6818      	ldr	r0, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4401      	add	r1, r0
 8002cf0:	6011      	str	r1, [r2, #0]
 8002cf2:	6053      	str	r3, [r2, #4]
 8002cf4:	e7d8      	b.n	8002ca8 <_free_r+0x24>
 8002cf6:	d902      	bls.n	8002cfe <_free_r+0x7a>
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	602b      	str	r3, [r5, #0]
 8002cfc:	e7d4      	b.n	8002ca8 <_free_r+0x24>
 8002cfe:	6820      	ldr	r0, [r4, #0]
 8002d00:	1821      	adds	r1, r4, r0
 8002d02:	428b      	cmp	r3, r1
 8002d04:	bf01      	itttt	eq
 8002d06:	6819      	ldreq	r1, [r3, #0]
 8002d08:	685b      	ldreq	r3, [r3, #4]
 8002d0a:	1809      	addeq	r1, r1, r0
 8002d0c:	6021      	streq	r1, [r4, #0]
 8002d0e:	6063      	str	r3, [r4, #4]
 8002d10:	6054      	str	r4, [r2, #4]
 8002d12:	e7c9      	b.n	8002ca8 <_free_r+0x24>
 8002d14:	bd38      	pop	{r3, r4, r5, pc}
 8002d16:	bf00      	nop
 8002d18:	200000fc 	.word	0x200000fc

08002d1c <_malloc_r>:
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	1ccd      	adds	r5, r1, #3
 8002d20:	f025 0503 	bic.w	r5, r5, #3
 8002d24:	3508      	adds	r5, #8
 8002d26:	2d0c      	cmp	r5, #12
 8002d28:	bf38      	it	cc
 8002d2a:	250c      	movcc	r5, #12
 8002d2c:	2d00      	cmp	r5, #0
 8002d2e:	4606      	mov	r6, r0
 8002d30:	db01      	blt.n	8002d36 <_malloc_r+0x1a>
 8002d32:	42a9      	cmp	r1, r5
 8002d34:	d903      	bls.n	8002d3e <_malloc_r+0x22>
 8002d36:	230c      	movs	r3, #12
 8002d38:	6033      	str	r3, [r6, #0]
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d3e:	f000 f857 	bl	8002df0 <__malloc_lock>
 8002d42:	4921      	ldr	r1, [pc, #132]	; (8002dc8 <_malloc_r+0xac>)
 8002d44:	680a      	ldr	r2, [r1, #0]
 8002d46:	4614      	mov	r4, r2
 8002d48:	b99c      	cbnz	r4, 8002d72 <_malloc_r+0x56>
 8002d4a:	4f20      	ldr	r7, [pc, #128]	; (8002dcc <_malloc_r+0xb0>)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	b923      	cbnz	r3, 8002d5a <_malloc_r+0x3e>
 8002d50:	4621      	mov	r1, r4
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 f83c 	bl	8002dd0 <_sbrk_r>
 8002d58:	6038      	str	r0, [r7, #0]
 8002d5a:	4629      	mov	r1, r5
 8002d5c:	4630      	mov	r0, r6
 8002d5e:	f000 f837 	bl	8002dd0 <_sbrk_r>
 8002d62:	1c43      	adds	r3, r0, #1
 8002d64:	d123      	bne.n	8002dae <_malloc_r+0x92>
 8002d66:	230c      	movs	r3, #12
 8002d68:	4630      	mov	r0, r6
 8002d6a:	6033      	str	r3, [r6, #0]
 8002d6c:	f000 f846 	bl	8002dfc <__malloc_unlock>
 8002d70:	e7e3      	b.n	8002d3a <_malloc_r+0x1e>
 8002d72:	6823      	ldr	r3, [r4, #0]
 8002d74:	1b5b      	subs	r3, r3, r5
 8002d76:	d417      	bmi.n	8002da8 <_malloc_r+0x8c>
 8002d78:	2b0b      	cmp	r3, #11
 8002d7a:	d903      	bls.n	8002d84 <_malloc_r+0x68>
 8002d7c:	6023      	str	r3, [r4, #0]
 8002d7e:	441c      	add	r4, r3
 8002d80:	6025      	str	r5, [r4, #0]
 8002d82:	e004      	b.n	8002d8e <_malloc_r+0x72>
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	42a2      	cmp	r2, r4
 8002d88:	bf0c      	ite	eq
 8002d8a:	600b      	streq	r3, [r1, #0]
 8002d8c:	6053      	strne	r3, [r2, #4]
 8002d8e:	4630      	mov	r0, r6
 8002d90:	f000 f834 	bl	8002dfc <__malloc_unlock>
 8002d94:	f104 000b 	add.w	r0, r4, #11
 8002d98:	1d23      	adds	r3, r4, #4
 8002d9a:	f020 0007 	bic.w	r0, r0, #7
 8002d9e:	1ac2      	subs	r2, r0, r3
 8002da0:	d0cc      	beq.n	8002d3c <_malloc_r+0x20>
 8002da2:	1a1b      	subs	r3, r3, r0
 8002da4:	50a3      	str	r3, [r4, r2]
 8002da6:	e7c9      	b.n	8002d3c <_malloc_r+0x20>
 8002da8:	4622      	mov	r2, r4
 8002daa:	6864      	ldr	r4, [r4, #4]
 8002dac:	e7cc      	b.n	8002d48 <_malloc_r+0x2c>
 8002dae:	1cc4      	adds	r4, r0, #3
 8002db0:	f024 0403 	bic.w	r4, r4, #3
 8002db4:	42a0      	cmp	r0, r4
 8002db6:	d0e3      	beq.n	8002d80 <_malloc_r+0x64>
 8002db8:	1a21      	subs	r1, r4, r0
 8002dba:	4630      	mov	r0, r6
 8002dbc:	f000 f808 	bl	8002dd0 <_sbrk_r>
 8002dc0:	3001      	adds	r0, #1
 8002dc2:	d1dd      	bne.n	8002d80 <_malloc_r+0x64>
 8002dc4:	e7cf      	b.n	8002d66 <_malloc_r+0x4a>
 8002dc6:	bf00      	nop
 8002dc8:	200000fc 	.word	0x200000fc
 8002dcc:	20000100 	.word	0x20000100

08002dd0 <_sbrk_r>:
 8002dd0:	b538      	push	{r3, r4, r5, lr}
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	4d05      	ldr	r5, [pc, #20]	; (8002dec <_sbrk_r+0x1c>)
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	4608      	mov	r0, r1
 8002dda:	602b      	str	r3, [r5, #0]
 8002ddc:	f7fe fb34 	bl	8001448 <_sbrk>
 8002de0:	1c43      	adds	r3, r0, #1
 8002de2:	d102      	bne.n	8002dea <_sbrk_r+0x1a>
 8002de4:	682b      	ldr	r3, [r5, #0]
 8002de6:	b103      	cbz	r3, 8002dea <_sbrk_r+0x1a>
 8002de8:	6023      	str	r3, [r4, #0]
 8002dea:	bd38      	pop	{r3, r4, r5, pc}
 8002dec:	20000160 	.word	0x20000160

08002df0 <__malloc_lock>:
 8002df0:	4801      	ldr	r0, [pc, #4]	; (8002df8 <__malloc_lock+0x8>)
 8002df2:	f000 b809 	b.w	8002e08 <__retarget_lock_acquire_recursive>
 8002df6:	bf00      	nop
 8002df8:	20000168 	.word	0x20000168

08002dfc <__malloc_unlock>:
 8002dfc:	4801      	ldr	r0, [pc, #4]	; (8002e04 <__malloc_unlock+0x8>)
 8002dfe:	f000 b804 	b.w	8002e0a <__retarget_lock_release_recursive>
 8002e02:	bf00      	nop
 8002e04:	20000168 	.word	0x20000168

08002e08 <__retarget_lock_acquire_recursive>:
 8002e08:	4770      	bx	lr

08002e0a <__retarget_lock_release_recursive>:
 8002e0a:	4770      	bx	lr

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
